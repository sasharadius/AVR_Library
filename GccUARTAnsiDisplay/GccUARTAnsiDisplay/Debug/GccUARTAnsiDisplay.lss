
GccUARTAnsiDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000f08  00000f9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800192  00800192  0000102e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001796  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000915  00000000  00000000  0000298a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3a  00000000  00000000  0000329f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  00003ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000670  00000000  00000000  0000428c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001394  00000000  00000000  000048fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	d2 c2       	rjmp	.+1444   	; 0x5c6 <__vector_16>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	c8 c3       	rjmp	.+1936   	; 0x7b6 <__vector_18>
  26:	f5 c3       	rjmp	.+2026   	; 0x812 <__vector_19>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 e0       	ldi	r30, 0x08	; 8
  48:	ff e0       	ldi	r31, 0x0F	; 15
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 39       	cpi	r26, 0x92	; 146
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e9       	ldi	r26, 0x92	; 146
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 3e       	cpi	r26, 0xE0	; 224
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	19 d3       	rcall	.+1586   	; 0x69a <main>
  68:	4d c7       	rjmp	.+3738   	; 0xf04 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <ansi_clearscreen>:
	uart_puts(data);
}

void ansi_write(char data[])
{
	uart_puts(data);
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2a 97       	sbiw	r28, 0x0a	; 10
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	85 e0       	ldi	r24, 0x05	; 5
  82:	e9 e0       	ldi	r30, 0x09	; 9
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	de 01       	movw	r26, r28
  88:	11 96       	adiw	r26, 0x01	; 1
  8a:	01 90       	ld	r0, Z+
  8c:	0d 92       	st	X+, r0
  8e:	8a 95       	dec	r24
  90:	e1 f7       	brne	.-8      	; 0x8a <ansi_clearscreen+0x1e>
  92:	ce 01       	movw	r24, r28
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	29 d4       	rcall	.+2130   	; 0x8ea <uart_puts>
  98:	2a 96       	adiw	r28, 0x0a	; 10
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	08 95       	ret

000000aa <ansi_movescursor_to>:
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	2a 97       	sbiw	r28, 0x0a	; 10
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	28 2f       	mov	r18, r24
  c4:	08 2e       	mov	r0, r24
  c6:	00 0c       	add	r0, r0
  c8:	33 0b       	sbc	r19, r19
  ca:	3f 93       	push	r19
  cc:	8f 93       	push	r24
  ce:	86 2f       	mov	r24, r22
  d0:	06 2e       	mov	r0, r22
  d2:	00 0c       	add	r0, r0
  d4:	99 0b       	sbc	r25, r25
  d6:	9f 93       	push	r25
  d8:	6f 93       	push	r22
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	9f 93       	push	r25
  e0:	8f 93       	push	r24
  e2:	8e 01       	movw	r16, r28
  e4:	0f 5f       	subi	r16, 0xFF	; 255
  e6:	1f 4f       	sbci	r17, 0xFF	; 255
  e8:	1f 93       	push	r17
  ea:	0f 93       	push	r16
  ec:	33 d4       	rcall	.+2150   	; 0x954 <sprintf>
  ee:	c8 01       	movw	r24, r16
  f0:	fc d3       	rcall	.+2040   	; 0x8ea <uart_puts>
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	2a 96       	adiw	r28, 0x0a	; 10
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	08 95       	ret

00000112 <ansi_savecursor_position>:
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	2a 97       	sbiw	r28, 0x0a	; 10
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	8b e1       	ldi	r24, 0x1B	; 27
 128:	9b e5       	ldi	r25, 0x5B	; 91
 12a:	9a 83       	std	Y+2, r25	; 0x02
 12c:	89 83       	std	Y+1, r24	; 0x01
 12e:	83 e7       	ldi	r24, 0x73	; 115
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9c 83       	std	Y+4, r25	; 0x04
 134:	8b 83       	std	Y+3, r24	; 0x03
 136:	ce 01       	movw	r24, r28
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	d7 d3       	rcall	.+1966   	; 0x8ea <uart_puts>
 13c:	2a 96       	adiw	r28, 0x0a	; 10
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <ansi_restorecursor_position>:
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	2a 97       	sbiw	r28, 0x0a	; 10
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
 162:	8b e1       	ldi	r24, 0x1B	; 27
 164:	9b e5       	ldi	r25, 0x5B	; 91
 166:	9a 83       	std	Y+2, r25	; 0x02
 168:	89 83       	std	Y+1, r24	; 0x01
 16a:	85 e7       	ldi	r24, 0x75	; 117
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9c 83       	std	Y+4, r25	; 0x04
 170:	8b 83       	std	Y+3, r24	; 0x03
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	b9 d3       	rcall	.+1906   	; 0x8ea <uart_puts>
 178:	2a 96       	adiw	r28, 0x0a	; 10
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	de bf       	out	0x3e, r29	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	cd bf       	out	0x3d, r28	; 61
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <ansi_set_attrcolor>:
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	2a 97       	sbiw	r28, 0x0a	; 10
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
 1a2:	26 2f       	mov	r18, r22
 1a4:	06 2e       	mov	r0, r22
 1a6:	00 0c       	add	r0, r0
 1a8:	33 0b       	sbc	r19, r19
 1aa:	3f 93       	push	r19
 1ac:	6f 93       	push	r22
 1ae:	28 2f       	mov	r18, r24
 1b0:	08 2e       	mov	r0, r24
 1b2:	00 0c       	add	r0, r0
 1b4:	33 0b       	sbc	r19, r19
 1b6:	3f 93       	push	r19
 1b8:	8f 93       	push	r24
 1ba:	8f e2       	ldi	r24, 0x2F	; 47
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	9f 93       	push	r25
 1c0:	8f 93       	push	r24
 1c2:	8e 01       	movw	r16, r28
 1c4:	0f 5f       	subi	r16, 0xFF	; 255
 1c6:	1f 4f       	sbci	r17, 0xFF	; 255
 1c8:	1f 93       	push	r17
 1ca:	0f 93       	push	r16
 1cc:	c3 d3       	rcall	.+1926   	; 0x954 <sprintf>
 1ce:	c8 01       	movw	r24, r16
 1d0:	8c d3       	rcall	.+1816   	; 0x8ea <uart_puts>
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	cd bf       	out	0x3d, r28	; 61
 1dc:	2a 96       	adiw	r28, 0x0a	; 10
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <ansi_set_attrcolorbc>:
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	2a 97       	sbiw	r28, 0x0a	; 10
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	24 2f       	mov	r18, r20
 20c:	04 2e       	mov	r0, r20
 20e:	00 0c       	add	r0, r0
 210:	33 0b       	sbc	r19, r19
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	26 2f       	mov	r18, r22
 218:	06 2e       	mov	r0, r22
 21a:	00 0c       	add	r0, r0
 21c:	33 0b       	sbc	r19, r19
 21e:	3f 93       	push	r19
 220:	6f 93       	push	r22
 222:	28 2f       	mov	r18, r24
 224:	08 2e       	mov	r0, r24
 226:	00 0c       	add	r0, r0
 228:	33 0b       	sbc	r19, r19
 22a:	3f 93       	push	r19
 22c:	8f 93       	push	r24
 22e:	88 e3       	ldi	r24, 0x38	; 56
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	9f 93       	push	r25
 234:	8f 93       	push	r24
 236:	8e 01       	movw	r16, r28
 238:	0f 5f       	subi	r16, 0xFF	; 255
 23a:	1f 4f       	sbci	r17, 0xFF	; 255
 23c:	1f 93       	push	r17
 23e:	0f 93       	push	r16
 240:	89 d3       	rcall	.+1810   	; 0x954 <sprintf>
 242:	c8 01       	movw	r24, r16
 244:	52 d3       	rcall	.+1700   	; 0x8ea <uart_puts>
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	2a 96       	adiw	r28, 0x0a	; 10
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <ansi_write_xcenter>:
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	2a 97       	sbiw	r28, 0x0a	; 10
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	cd bf       	out	0x3d, r28	; 61
 282:	8b 01       	movw	r16, r22
 284:	fb 01       	movw	r30, r22
 286:	01 90       	ld	r0, Z+
 288:	00 20       	and	r0, r0
 28a:	e9 f7       	brne	.-6      	; 0x286 <ansi_write_xcenter+0x20>
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	e6 1b       	sub	r30, r22
 290:	f7 0b       	sbc	r31, r23
 292:	f6 95       	lsr	r31
 294:	e7 95       	ror	r30
 296:	98 e2       	ldi	r25, 0x28	; 40
 298:	9e 1b       	sub	r25, r30
 29a:	29 2f       	mov	r18, r25
 29c:	09 2e       	mov	r0, r25
 29e:	00 0c       	add	r0, r0
 2a0:	33 0b       	sbc	r19, r19
 2a2:	3f 93       	push	r19
 2a4:	9f 93       	push	r25
 2a6:	28 2f       	mov	r18, r24
 2a8:	08 2e       	mov	r0, r24
 2aa:	00 0c       	add	r0, r0
 2ac:	33 0b       	sbc	r19, r19
 2ae:	3f 93       	push	r19
 2b0:	8f 93       	push	r24
 2b2:	8e e0       	ldi	r24, 0x0E	; 14
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	9f 93       	push	r25
 2b8:	8f 93       	push	r24
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	7c 01       	movw	r14, r24
 2c0:	9f 93       	push	r25
 2c2:	8f 93       	push	r24
 2c4:	47 d3       	rcall	.+1678   	; 0x954 <sprintf>
 2c6:	c7 01       	movw	r24, r14
 2c8:	10 d3       	rcall	.+1568   	; 0x8ea <uart_puts>
 2ca:	c8 01       	movw	r24, r16
 2cc:	0e d3       	rcall	.+1564   	; 0x8ea <uart_puts>
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	2a 96       	adiw	r28, 0x0a	; 10
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	08 95       	ret

000002f2 <ansi_write_pos>:
 2f2:	ef 92       	push	r14
 2f4:	ff 92       	push	r15
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	2a 97       	sbiw	r28, 0x0a	; 10
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	7a 01       	movw	r14, r20
 310:	28 2f       	mov	r18, r24
 312:	08 2e       	mov	r0, r24
 314:	00 0c       	add	r0, r0
 316:	33 0b       	sbc	r19, r19
 318:	3f 93       	push	r19
 31a:	8f 93       	push	r24
 31c:	86 2f       	mov	r24, r22
 31e:	06 2e       	mov	r0, r22
 320:	00 0c       	add	r0, r0
 322:	99 0b       	sbc	r25, r25
 324:	9f 93       	push	r25
 326:	6f 93       	push	r22
 328:	8e e0       	ldi	r24, 0x0E	; 14
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	9f 93       	push	r25
 32e:	8f 93       	push	r24
 330:	8e 01       	movw	r16, r28
 332:	0f 5f       	subi	r16, 0xFF	; 255
 334:	1f 4f       	sbci	r17, 0xFF	; 255
 336:	1f 93       	push	r17
 338:	0f 93       	push	r16
 33a:	0c d3       	rcall	.+1560   	; 0x954 <sprintf>
 33c:	c8 01       	movw	r24, r16
 33e:	d5 d2       	rcall	.+1450   	; 0x8ea <uart_puts>
 340:	c7 01       	movw	r24, r14
 342:	d3 d2       	rcall	.+1446   	; 0x8ea <uart_puts>
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
 34e:	2a 96       	adiw	r28, 0x0a	; 10
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	08 95       	ret

00000368 <ansi_writeloop>:
}

void ansi_writeloop(char data[],int8_t loop)
{
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
	for (int i = 0 ;i  < loop;i++)
 374:	06 2f       	mov	r16, r22
 376:	66 0f       	add	r22, r22
 378:	11 0b       	sbc	r17, r17
 37a:	10 16       	cp	r1, r16
 37c:	11 06       	cpc	r1, r17
 37e:	4c f4       	brge	.+18     	; 0x392 <ansi_writeloop+0x2a>
 380:	7c 01       	movw	r14, r24
 382:	c0 e0       	ldi	r28, 0x00	; 0
 384:	d0 e0       	ldi	r29, 0x00	; 0
	uart_puts(data);
}

void ansi_write(char data[])
{
	uart_puts(data);
 386:	c7 01       	movw	r24, r14
 388:	b0 d2       	rcall	.+1376   	; 0x8ea <uart_puts>
}

void ansi_writeloop(char data[],int8_t loop)
{
	for (int i = 0 ;i  < loop;i++)
 38a:	21 96       	adiw	r28, 0x01	; 1
 38c:	c0 17       	cp	r28, r16
 38e:	d1 07       	cpc	r29, r17
 390:	d1 f7       	brne	.-12     	; 0x386 <ansi_writeloop+0x1e>
		ansi_write(data);
		
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	08 95       	ret

000003a0 <ansi_draw_box>:


void ansi_draw_box(int8_t chartype,int8_t x1,int8_t y1,int8_t x2,int8_t y2)
{
 3a0:	8f 92       	push	r8
 3a2:	9f 92       	push	r9
 3a4:	af 92       	push	r10
 3a6:	bf 92       	push	r11
 3a8:	cf 92       	push	r12
 3aa:	df 92       	push	r13
 3ac:	ef 92       	push	r14
 3ae:	ff 92       	push	r15
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
 3bc:	2c 97       	sbiw	r28, 0x0c	; 12
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	cd bf       	out	0x3d, r28	; 61
 3c8:	16 2f       	mov	r17, r22
 3ca:	c4 2e       	mov	r12, r20
 3cc:	d2 2e       	mov	r13, r18
	char horiz[2] = {179,0};
 3ce:	93 eb       	ldi	r25, 0xB3	; 179
 3d0:	99 83       	std	Y+1, r25	; 0x01
 3d2:	1a 82       	std	Y+2, r1	; 0x02
	char vert[2] = {179,0};
 3d4:	9b 83       	std	Y+3, r25	; 0x03
 3d6:	1c 82       	std	Y+4, r1	; 0x04
	char up_right[2] = {179,0};
 3d8:	9d 83       	std	Y+5, r25	; 0x05
 3da:	1e 82       	std	Y+6, r1	; 0x06
	char up_left[2] = {179,0};
 3dc:	9f 83       	std	Y+7, r25	; 0x07
 3de:	18 86       	std	Y+8, r1	; 0x08
	char dw_left[2] = {179,0};
 3e0:	99 87       	std	Y+9, r25	; 0x09
 3e2:	1a 86       	std	Y+10, r1	; 0x0a
	char dw_right[2] = {179,0};
 3e4:	9b 87       	std	Y+11, r25	; 0x0b
 3e6:	1c 86       	std	Y+12, r1	; 0x0c
	
	if (chartype == 0) 
 3e8:	81 11       	cpse	r24, r1
 3ea:	08 c0       	rjmp	.+16     	; 0x3fc <ansi_draw_box+0x5c>
	{
		horiz[0] = 0xb0;
 3ec:	90 eb       	ldi	r25, 0xB0	; 176
 3ee:	99 83       	std	Y+1, r25	; 0x01
		vert[0] = 0xb0;
 3f0:	9b 83       	std	Y+3, r25	; 0x03
		up_left[0] = 0xb0;
 3f2:	9f 83       	std	Y+7, r25	; 0x07
		up_right[0] = 0xb0;
 3f4:	9d 83       	std	Y+5, r25	; 0x05
		dw_left[0] = 0xb0;
 3f6:	99 87       	std	Y+9, r25	; 0x09
		dw_right[0] = 0xb0;
 3f8:	9b 87       	std	Y+11, r25	; 0x0b
 3fa:	14 c0       	rjmp	.+40     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	}
	
	if (chartype == 1)
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	41 f4       	brne	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	{
		horiz[0] = 0xb1;
 400:	91 eb       	ldi	r25, 0xB1	; 177
 402:	99 83       	std	Y+1, r25	; 0x01
		vert[0] = 0xb1;
 404:	9b 83       	std	Y+3, r25	; 0x03
		up_left[0] = 0xb1;
 406:	9f 83       	std	Y+7, r25	; 0x07
		up_right[0] = 0xb1;
 408:	9d 83       	std	Y+5, r25	; 0x05
		dw_left[0] = 0xb1;
 40a:	99 87       	std	Y+9, r25	; 0x09
		dw_right[0] = 0xb1;
 40c:	9b 87       	std	Y+11, r25	; 0x0b
 40e:	19 c0       	rjmp	.+50     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	}	

	if (chartype == 2)
 410:	82 30       	cpi	r24, 0x02	; 2
 412:	41 f4       	brne	.+16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		horiz[0] = 0xb2;
 414:	82 eb       	ldi	r24, 0xB2	; 178
 416:	89 83       	std	Y+1, r24	; 0x01
		vert[0] = 0xb2;
 418:	8b 83       	std	Y+3, r24	; 0x03
		up_left[0] = 0xb2;
 41a:	8f 83       	std	Y+7, r24	; 0x07
		up_right[0] = 0xb2;
 41c:	8d 83       	std	Y+5, r24	; 0x05
		dw_left[0] = 0xb2;
 41e:	89 87       	std	Y+9, r24	; 0x09
		dw_right[0] = 0xb2;
 420:	8b 87       	std	Y+11, r24	; 0x0b
 422:	1d c0       	rjmp	.+58     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	
	
	if (chartype == 3)
 424:	83 30       	cpi	r24, 0x03	; 3
 426:	69 f4       	brne	.+26     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	{
		horiz[0] = 0xc4;
 428:	84 ec       	ldi	r24, 0xC4	; 196
 42a:	89 83       	std	Y+1, r24	; 0x01
		vert[0] = 0xb3;
 42c:	83 eb       	ldi	r24, 0xB3	; 179
 42e:	8b 83       	std	Y+3, r24	; 0x03
		up_left[0] = 0xda;
 430:	8a ed       	ldi	r24, 0xDA	; 218
 432:	8f 83       	std	Y+7, r24	; 0x07
		up_right[0] = 0xbf;
 434:	8f eb       	ldi	r24, 0xBF	; 191
 436:	8d 83       	std	Y+5, r24	; 0x05
		dw_left[0] = 0xc0;
 438:	80 ec       	ldi	r24, 0xC0	; 192
 43a:	89 87       	std	Y+9, r24	; 0x09
		dw_right[0] = 0xd9;
 43c:	89 ed       	ldi	r24, 0xD9	; 217
 43e:	8b 87       	std	Y+11, r24	; 0x0b
 440:	0e c0       	rjmp	.+28     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}	
	
	if (chartype == 4)
 442:	84 30       	cpi	r24, 0x04	; 4
 444:	61 f4       	brne	.+24     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	{
		horiz[0] = 0xcd;
 446:	8d ec       	ldi	r24, 0xCD	; 205
 448:	89 83       	std	Y+1, r24	; 0x01
		vert[0] = 0xba;
 44a:	8a eb       	ldi	r24, 0xBA	; 186
 44c:	8b 83       	std	Y+3, r24	; 0x03
		up_left[0] = 0xc9;
 44e:	89 ec       	ldi	r24, 0xC9	; 201
 450:	8f 83       	std	Y+7, r24	; 0x07
		up_right[0] = 0xbb;
 452:	8b eb       	ldi	r24, 0xBB	; 187
 454:	8d 83       	std	Y+5, r24	; 0x05
		dw_left[0] = 0xc8;
 456:	88 ec       	ldi	r24, 0xC8	; 200
 458:	89 87       	std	Y+9, r24	; 0x09
		dw_right[0] = 0xbc;
 45a:	8c eb       	ldi	r24, 0xBC	; 188
 45c:	8b 87       	std	Y+11, r24	; 0x0b
	

		
	
	int addchar = 0;
	if (y1 != y2 && x1 != x2)
 45e:	c0 16       	cp	r12, r16
 460:	09 f4       	brne	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	75 c0       	rjmp	.+234    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 464:	1d 15       	cp	r17, r13
 466:	09 f4       	brne	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	59 c0       	rjmp	.+178    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
	{
		ansi_movescursor_to(x1,y1);
 46a:	6c 2d       	mov	r22, r12
 46c:	81 2f       	mov	r24, r17
 46e:	1d de       	rcall	.-966    	; 0xaa <ansi_movescursor_to>
	uart_puts(data);
}

void ansi_write(char data[])
{
	uart_puts(data);
 470:	ce 01       	movw	r24, r28
 472:	07 96       	adiw	r24, 0x07	; 7
 474:	3a d2       	rcall	.+1140   	; 0x8ea <uart_puts>
		ansi_movescursor_to(x1,y1);
		ansi_write(up_left);		
		addchar = 1;
	}
		
	ansi_movescursor_to(x1+addchar,y1);
 476:	88 24       	eor	r8, r8
 478:	83 94       	inc	r8
 47a:	81 0e       	add	r8, r17
 47c:	6c 2d       	mov	r22, r12
 47e:	88 2d       	mov	r24, r8
 480:	14 de       	rcall	.-984    	; 0xaa <ansi_movescursor_to>
	ansi_writeloop(horiz,x2-x1-addchar);
 482:	99 24       	eor	r9, r9
 484:	9a 94       	dec	r9
 486:	9d 0c       	add	r9, r13
 488:	91 1a       	sub	r9, r17
 48a:	69 2d       	mov	r22, r9
 48c:	ce 01       	movw	r24, r28
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	6b df       	rcall	.-298    	; 0x368 <ansi_writeloop>
	
	if (y1 != y2 && x1 != x2)
	{	
		ansi_movescursor_to(x2,y1);
 492:	6c 2d       	mov	r22, r12
 494:	8d 2d       	mov	r24, r13
 496:	09 de       	rcall	.-1006   	; 0xaa <ansi_movescursor_to>
	uart_puts(data);
}

void ansi_write(char data[])
{
	uart_puts(data);
 498:	ce 01       	movw	r24, r28
 49a:	05 96       	adiw	r24, 0x05	; 5
 49c:	26 d2       	rcall	.+1100   	; 0x8ea <uart_puts>
	{	
		ansi_movescursor_to(x2,y1);
		ansi_write(up_right);
	}
	
	for (int y = y1 + 1 ;y  < y2;y++)
 49e:	ec 2c       	mov	r14, r12
 4a0:	0c 2c       	mov	r0, r12
 4a2:	00 0c       	add	r0, r0
 4a4:	ff 08       	sbc	r15, r15
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	e8 1a       	sub	r14, r24
 4aa:	f8 0a       	sbc	r15, r24
 4ac:	a0 2e       	mov	r10, r16
 4ae:	00 2e       	mov	r0, r16
 4b0:	00 0c       	add	r0, r0
 4b2:	bb 08       	sbc	r11, r11
 4b4:	ea 14       	cp	r14, r10
 4b6:	fb 04       	cpc	r15, r11
 4b8:	2c f0       	brlt	.+10     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4ba:	1c c0       	rjmp	.+56     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4bc:	81 2e       	mov	r8, r17
		ansi_write(up_left);		
		addchar = 1;
	}
		
	ansi_movescursor_to(x1+addchar,y1);
	ansi_writeloop(horiz,x2-x1-addchar);
 4be:	91 2c       	mov	r9, r1
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	{	
		ansi_movescursor_to(x2,y1);
		ansi_write(up_right);
	}
	
	for (int y = y1 + 1 ;y  < y2;y++)
 4c2:	81 2e       	mov	r8, r17
	{
		ansi_movescursor_to(x1,y);
 4c4:	6e 2d       	mov	r22, r14
 4c6:	81 2f       	mov	r24, r17
 4c8:	f0 dd       	rcall	.-1056   	; 0xaa <ansi_movescursor_to>
	uart_puts(data);
}

void ansi_write(char data[])
{
	uart_puts(data);
 4ca:	ce 01       	movw	r24, r28
 4cc:	03 96       	adiw	r24, 0x03	; 3
 4ce:	0d d2       	rcall	.+1050   	; 0x8ea <uart_puts>
	
	for (int y = y1 + 1 ;y  < y2;y++)
	{
		ansi_movescursor_to(x1,y);
		ansi_write(vert);
		ansi_movescursor_to(x2,y);
 4d0:	6e 2d       	mov	r22, r14
 4d2:	8d 2d       	mov	r24, r13
 4d4:	ea dd       	rcall	.-1068   	; 0xaa <ansi_movescursor_to>
	uart_puts(data);
}

void ansi_write(char data[])
{
	uart_puts(data);
 4d6:	ce 01       	movw	r24, r28
 4d8:	03 96       	adiw	r24, 0x03	; 3
 4da:	07 d2       	rcall	.+1038   	; 0x8ea <uart_puts>
	{	
		ansi_movescursor_to(x2,y1);
		ansi_write(up_right);
	}
	
	for (int y = y1 + 1 ;y  < y2;y++)
 4dc:	8f ef       	ldi	r24, 0xFF	; 255
 4de:	e8 1a       	sub	r14, r24
 4e0:	f8 0a       	sbc	r15, r24
 4e2:	ea 14       	cp	r14, r10
 4e4:	fb 04       	cpc	r15, r11
 4e6:	74 f3       	brlt	.-36     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
		ansi_write(vert);
		ansi_movescursor_to(x2,y);
		ansi_write(vert);
	}
	
	if (y1 != y2 && x1 != x2)
 4e8:	c0 16       	cp	r12, r16
 4ea:	09 f4       	brne	.+2      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ec:	52 c0       	rjmp	.+164    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 4ee:	1d 15       	cp	r17, r13
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4f2:	47 c0       	rjmp	.+142    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
	{	
		ansi_movescursor_to(x1,y2);
 4f4:	60 2f       	mov	r22, r16
 4f6:	81 2f       	mov	r24, r17
 4f8:	d8 dd       	rcall	.-1104   	; 0xaa <ansi_movescursor_to>
	uart_puts(data);
}

void ansi_write(char data[])
{
	uart_puts(data);
 4fa:	ce 01       	movw	r24, r28
 4fc:	09 96       	adiw	r24, 0x09	; 9
 4fe:	f5 d1       	rcall	.+1002   	; 0x8ea <uart_puts>
	{	
		ansi_movescursor_to(x1,y2);
		ansi_write(dw_left);
	}
	
	ansi_movescursor_to(x1+addchar,y2);
 500:	60 2f       	mov	r22, r16
 502:	88 2d       	mov	r24, r8
 504:	d2 dd       	rcall	.-1116   	; 0xaa <ansi_movescursor_to>
	ansi_writeloop(horiz,x2-x1-addchar);
 506:	69 2d       	mov	r22, r9
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	2d df       	rcall	.-422    	; 0x368 <ansi_writeloop>
	
	if (y1 != y2 && x1 != x2)
	{	
		ansi_movescursor_to(x2,y2);
 50e:	60 2f       	mov	r22, r16
 510:	8d 2d       	mov	r24, r13
 512:	cb dd       	rcall	.-1130   	; 0xaa <ansi_movescursor_to>
	uart_puts(data);
}

void ansi_write(char data[])
{
	uart_puts(data);
 514:	ce 01       	movw	r24, r28
 516:	0b 96       	adiw	r24, 0x0b	; 11
 518:	e8 d1       	rcall	.+976    	; 0x8ea <uart_puts>
	if (y1 != y2 && x1 != x2)
	{	
		ansi_movescursor_to(x2,y2);
		ansi_write(dw_right);
	}
 51a:	42 c0       	rjmp	.+132    	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
		ansi_movescursor_to(x1,y1);
		ansi_write(up_left);		
		addchar = 1;
	}
		
	ansi_movescursor_to(x1+addchar,y1);
 51c:	6c 2d       	mov	r22, r12
 51e:	81 2f       	mov	r24, r17
 520:	c4 dd       	rcall	.-1144   	; 0xaa <ansi_movescursor_to>
	ansi_writeloop(horiz,x2-x1-addchar);
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	ce 01       	movw	r24, r28
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	1f df       	rcall	.-450    	; 0x368 <ansi_writeloop>
	{	
		ansi_movescursor_to(x2,y1);
		ansi_write(up_right);
	}
	
	for (int y = y1 + 1 ;y  < y2;y++)
 52a:	ec 2c       	mov	r14, r12
 52c:	0c 2c       	mov	r0, r12
 52e:	00 0c       	add	r0, r0
 530:	ff 08       	sbc	r15, r15
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	e8 1a       	sub	r14, r24
 536:	f8 0a       	sbc	r15, r24
 538:	a0 2e       	mov	r10, r16
 53a:	00 2e       	mov	r0, r16
 53c:	00 0c       	add	r0, r0
 53e:	bb 08       	sbc	r11, r11
 540:	ea 14       	cp	r14, r10
 542:	fb 04       	cpc	r15, r11
 544:	0c f4       	brge	.+2      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 546:	ba cf       	rjmp	.-140    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 548:	81 2e       	mov	r8, r17
		ansi_write(up_left);		
		addchar = 1;
	}
		
	ansi_movescursor_to(x1+addchar,y1);
	ansi_writeloop(horiz,x2-x1-addchar);
 54a:	91 2c       	mov	r9, r1
 54c:	1a c0       	rjmp	.+52     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
		ansi_movescursor_to(x1,y1);
		ansi_write(up_left);		
		addchar = 1;
	}
		
	ansi_movescursor_to(x1+addchar,y1);
 54e:	6c 2d       	mov	r22, r12
 550:	81 2f       	mov	r24, r17
 552:	ab dd       	rcall	.-1194   	; 0xaa <ansi_movescursor_to>
	ansi_writeloop(horiz,x2-x1-addchar);
 554:	9d 2c       	mov	r9, r13
 556:	91 1a       	sub	r9, r17
 558:	69 2d       	mov	r22, r9
 55a:	ce 01       	movw	r24, r28
 55c:	01 96       	adiw	r24, 0x01	; 1
 55e:	04 df       	rcall	.-504    	; 0x368 <ansi_writeloop>
	{	
		ansi_movescursor_to(x2,y1);
		ansi_write(up_right);
	}
	
	for (int y = y1 + 1 ;y  < y2;y++)
 560:	ec 2c       	mov	r14, r12
 562:	0c 2c       	mov	r0, r12
 564:	00 0c       	add	r0, r0
 566:	ff 08       	sbc	r15, r15
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	e8 1a       	sub	r14, r24
 56c:	f8 0a       	sbc	r15, r24
 56e:	a0 2e       	mov	r10, r16
 570:	00 2e       	mov	r0, r16
 572:	00 0c       	add	r0, r0
 574:	bb 08       	sbc	r11, r11
 576:	ea 14       	cp	r14, r10
 578:	fb 04       	cpc	r15, r11
 57a:	0c f4       	brge	.+2      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 57c:	a2 cf       	rjmp	.-188    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 57e:	81 2e       	mov	r8, r17
 580:	08 c0       	rjmp	.+16     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
	{	
		ansi_movescursor_to(x1,y2);
		ansi_write(dw_left);
	}
	
	ansi_movescursor_to(x1+addchar,y2);
 582:	60 2f       	mov	r22, r16
 584:	88 2d       	mov	r24, r8
 586:	91 dd       	rcall	.-1246   	; 0xaa <ansi_movescursor_to>
	ansi_writeloop(horiz,x2-x1-addchar);
 588:	69 2d       	mov	r22, r9
 58a:	ce 01       	movw	r24, r28
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	ec de       	rcall	.-552    	; 0x368 <ansi_writeloop>
 590:	07 c0       	rjmp	.+14     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
	{	
		ansi_movescursor_to(x1,y2);
		ansi_write(dw_left);
	}
	
	ansi_movescursor_to(x1+addchar,y2);
 592:	6c 2d       	mov	r22, r12
 594:	88 2d       	mov	r24, r8
 596:	89 dd       	rcall	.-1262   	; 0xaa <ansi_movescursor_to>
	ansi_writeloop(horiz,x2-x1-addchar);
 598:	69 2d       	mov	r22, r9
 59a:	ce 01       	movw	r24, r28
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	e4 de       	rcall	.-568    	; 0x368 <ansi_writeloop>
	if (y1 != y2 && x1 != x2)
	{	
		ansi_movescursor_to(x2,y2);
		ansi_write(dw_right);
	}
 5a0:	2c 96       	adiw	r28, 0x0c	; 12
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	de bf       	out	0x3e, r29	; 62
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	cd bf       	out	0x3d, r28	; 61
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	1f 91       	pop	r17
 5b2:	0f 91       	pop	r16
 5b4:	ff 90       	pop	r15
 5b6:	ef 90       	pop	r14
 5b8:	df 90       	pop	r13
 5ba:	cf 90       	pop	r12
 5bc:	bf 90       	pop	r11
 5be:	af 90       	pop	r10
 5c0:	9f 90       	pop	r9
 5c2:	8f 90       	pop	r8
 5c4:	08 95       	ret

000005c6 <__vector_16>:
// ISR definition
int Timer = 0;
int Second = 0;
char Buffer[4];
ISR(TIMER0_OVF_vect)
{
 5c6:	1f 92       	push	r1
 5c8:	0f 92       	push	r0
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	0f 92       	push	r0
 5ce:	11 24       	eor	r1, r1
 5d0:	2f 93       	push	r18
 5d2:	3f 93       	push	r19
 5d4:	4f 93       	push	r20
 5d6:	5f 93       	push	r21
 5d8:	6f 93       	push	r22
 5da:	7f 93       	push	r23
 5dc:	8f 93       	push	r24
 5de:	9f 93       	push	r25
 5e0:	af 93       	push	r26
 5e2:	bf 93       	push	r27
 5e4:	ef 93       	push	r30
 5e6:	ff 93       	push	r31
	if (StartTimer == 1)
 5e8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <StartTimer>
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <__vector_16+0x2c>
 5f0:	43 c0       	rjmp	.+134    	; 0x678 <__vector_16+0xb2>
	{
		Timer++;
 5f2:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Timer>
 5f6:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <Timer+0x1>
 5fa:	01 96       	adiw	r24, 0x01	; 1
		if (Timer / 50 >= 1)
 5fc:	82 33       	cpi	r24, 0x32	; 50
 5fe:	91 05       	cpc	r25, r1
 600:	2c f4       	brge	.+10     	; 0x60c <__vector_16+0x46>
char Buffer[4];
ISR(TIMER0_OVF_vect)
{
	if (StartTimer == 1)
	{
		Timer++;
 602:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <Timer+0x1>
 606:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <Timer>
 60a:	36 c0       	rjmp	.+108    	; 0x678 <__vector_16+0xb2>
		if (Timer / 50 >= 1)
		{
			Timer = 0;
 60c:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <Timer+0x1>
 610:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <Timer>
			Second++;
 614:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 618:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
 622:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
		
			ansi_savecursor_position();
 626:	75 dd       	rcall	.-1302   	; 0x112 <ansi_savecursor_position>
		
			sprintf(Buffer,"%02d:%02d:%02d",Second / 3600,(Second % 3600)  / 60,(Second % 3600) % 60);
 628:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 62c:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
 630:	60 e1       	ldi	r22, 0x10	; 16
 632:	7e e0       	ldi	r23, 0x0E	; 14
 634:	68 d1       	rcall	.+720    	; 0x906 <__divmodhi4>
 636:	26 2f       	mov	r18, r22
 638:	37 2f       	mov	r19, r23
 63a:	6c e3       	ldi	r22, 0x3C	; 60
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	63 d1       	rcall	.+710    	; 0x906 <__divmodhi4>
 640:	9f 93       	push	r25
 642:	8f 93       	push	r24
 644:	7f 93       	push	r23
 646:	6f 93       	push	r22
 648:	3f 93       	push	r19
 64a:	2f 93       	push	r18
 64c:	84 e4       	ldi	r24, 0x44	; 68
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	9f 93       	push	r25
 652:	8f 93       	push	r24
 654:	8c ed       	ldi	r24, 0xDC	; 220
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	9f 93       	push	r25
 65a:	8f 93       	push	r24
 65c:	7b d1       	rcall	.+758    	; 0x954 <sprintf>
			ansi_write_xcenter(16,Buffer);
 65e:	6c ed       	ldi	r22, 0xDC	; 220
 660:	71 e0       	ldi	r23, 0x01	; 1
 662:	80 e1       	ldi	r24, 0x10	; 16
 664:	00 de       	rcall	.-1024   	; 0x266 <ansi_write_xcenter>
		
			ansi_restorecursor_position();
 666:	73 dd       	rcall	.-1306   	; 0x14e <ansi_restorecursor_position>
 668:	8d b7       	in	r24, 0x3d	; 61
 66a:	9e b7       	in	r25, 0x3e	; 62
 66c:	0a 96       	adiw	r24, 0x0a	; 10
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	f8 94       	cli
 672:	9e bf       	out	0x3e, r25	; 62
 674:	0f be       	out	0x3f, r0	; 63
 676:	8d bf       	out	0x3d, r24	; 61
		}
	}
}
 678:	ff 91       	pop	r31
 67a:	ef 91       	pop	r30
 67c:	bf 91       	pop	r27
 67e:	af 91       	pop	r26
 680:	9f 91       	pop	r25
 682:	8f 91       	pop	r24
 684:	7f 91       	pop	r23
 686:	6f 91       	pop	r22
 688:	5f 91       	pop	r21
 68a:	4f 91       	pop	r20
 68c:	3f 91       	pop	r19
 68e:	2f 91       	pop	r18
 690:	0f 90       	pop	r0
 692:	0f be       	out	0x3f, r0	; 63
 694:	0f 90       	pop	r0
 696:	1f 90       	pop	r1
 698:	18 95       	reti

0000069a <main>:
	///////////////////////////////////////

	// Input/Output Ports initialization
	// Port B initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
 69a:	14 b8       	out	0x04, r1	; 4
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
 69c:	15 b8       	out	0x05, r1	; 5

	// Port C initialization
	// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 69e:	17 b8       	out	0x07, r1	; 7
	// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
 6a0:	18 b8       	out	0x08, r1	; 8

	// Port D initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
 6a2:	1a b8       	out	0x0a, r1	; 10
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
 6a4:	1b b8       	out	0x0b, r1	; 11
	// Clock source: System Clock
	// Clock value: Timer 0 Stopped
	// Mode: Normal top=0xFF
	// OC0A output: Disconnected
	// OC0B output: Disconnected
	TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
 6a6:	14 bc       	out	0x24, r1	; 36
	TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
 6a8:	15 bc       	out	0x25, r1	; 37
	TCNT0=0x00;
 6aa:	16 bc       	out	0x26, r1	; 38
	OCR0A=0x00;
 6ac:	17 bc       	out	0x27, r1	; 39
	OCR0B=0x00;
 6ae:	18 bc       	out	0x28, r1	; 40
	// Input Capture on Falling Edge
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
 6b0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
 6b4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
	TCNT1H=0x00;
 6b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
	TCNT1L=0x00;
 6bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	ICR1H=0x00;
 6c0:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
	ICR1L=0x00;
 6c4:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
	OCR1AH=0x00;
 6c8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
	OCR1AL=0x00;
 6cc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	OCR1BH=0x00;
 6d0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
	OCR1BL=0x00;
 6d4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
	// Clock source: System Clock
	// Clock value: Timer2 Stopped
	// Mode: Normal top=0xFF
	// OC2A output: Disconnected
	// OC2B output: Disconnected
	ASSR=(0<<EXCLK) | (0<<AS2);
 6d8:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__EEPROM_REGION_LENGTH__+0x7f00b6>
	TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
 6dc:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__EEPROM_REGION_LENGTH__+0x7f00b0>
	TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
 6e0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__EEPROM_REGION_LENGTH__+0x7f00b1>
	TCNT2=0x00;
 6e4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__EEPROM_REGION_LENGTH__+0x7f00b2>
	OCR2A=0x00;
 6e8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__EEPROM_REGION_LENGTH__+0x7f00b3>
	OCR2B=0x00;
 6ec:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__EEPROM_REGION_LENGTH__+0x7f00b4>

	// Timer/Counter 0 Interrupt(s) initialization
	TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
 6f0:	ee e6       	ldi	r30, 0x6E	; 110
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	10 82       	st	Z, r1

	// Timer/Counter 1 Interrupt(s) initialization
	TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
 6f6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>

	// Timer/Counter 2 Interrupt(s) initialization
	TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
 6fa:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__EEPROM_REGION_LENGTH__+0x7f0070>
	// INT0: Off
	// INT1: Off
	// Interrupt on any change on pins PCINT0-7: Off
	// Interrupt on any change on pins PCINT8-14: Off
	// Interrupt on any change on pins PCINT16-23: Off
	EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
 6fe:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__EEPROM_REGION_LENGTH__+0x7f0069>
	EIMSK=(0<<INT1) | (0<<INT0);
 702:	1d ba       	out	0x1d, r1	; 29
	PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
 704:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>

	// USART initialization
	// USART disabled
	UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
 708:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
	// Analog Comparator: Off
	// The Analog Comparator's positive input is
	// connected to the AIN0 pin
	// The Analog Comparator's negative input is
	// connected to the AIN1 pin
	ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
 70c:	80 e8       	ldi	r24, 0x80	; 128
 70e:	80 bf       	out	0x30, r24	; 48
	ADCSRB=(0<<ACME);
 710:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__EEPROM_REGION_LENGTH__+0x7f007b>
	// Digital input buffer on AIN0: On
	// Digital input buffer on AIN1: On
	DIDR1=(0<<AIN0D) | (0<<AIN1D);
 714:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__EEPROM_REGION_LENGTH__+0x7f007f>

	// ADC initialization
	// ADC disabled
	ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
 718:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>

	// SPI initialization
	// SPI disabled
	SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 71c:	1c bc       	out	0x2c, r1	; 44

	// TWI initialization
	// TWI disabled
	TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);	
 71e:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__EEPROM_REGION_LENGTH__+0x7f00bc>
	// Clock value: 250.000 kHz
	// Mode: Normal top=0xFF
	// OC0A output: Disconnected
	// OC0B output: Disconnected
	// Timer Period: 1 ms
	TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
 722:	14 bc       	out	0x24, r1	; 36
	TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (1<<CS00);
 724:	83 e0       	ldi	r24, 0x03	; 3
 726:	85 bd       	out	0x25, r24	; 37
	TCNT0=0x06;
 728:	86 e0       	ldi	r24, 0x06	; 6
 72a:	86 bd       	out	0x26, r24	; 38
	OCR0A=0x00;
 72c:	17 bc       	out	0x27, r1	; 39
	OCR0B=0x00;	
 72e:	18 bc       	out	0x28, r1	; 40
	

	// Timer/Counter 0 Interrupt(s) initialization
	TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);	
 730:	c1 e0       	ldi	r28, 0x01	; 1
 732:	c0 83       	st	Z, r28
     *  with the macro 
     *  UART_BAUD_SELECT() (normal speed mode )
     *  or 
     *  UART_BAUD_SELECT_DOUBLE_SPEED() ( double speed mode)
     */
    uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) ); 
 734:	87 e6       	ldi	r24, 0x67	; 103
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	96 d0       	rcall	.+300    	; 0x866 <uart_init>
    
    /*
     * now enable interrupt, since UART library is interrupt controlled
     */
    sei();
 73a:	78 94       	sei
	
	
	
	ansi_set_attrcolor(0,37);
 73c:	65 e2       	ldi	r22, 0x25	; 37
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	24 dd       	rcall	.-1464   	; 0x18a <ansi_set_attrcolor>
	ansi_clearscreen();
 742:	94 dc       	rcall	.-1752   	; 0x6c <ansi_clearscreen>
	
	//DrawBox
	ansi_set_attrcolor(0,ANSI_FC_GREEN);
 744:	60 e2       	ldi	r22, 0x20	; 32
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	20 dd       	rcall	.-1472   	; 0x18a <ansi_set_attrcolor>
	ansi_draw_box(ANSI_CT_SINGLE,5,2,75,6);
 74a:	06 e0       	ldi	r16, 0x06	; 6
 74c:	2b e4       	ldi	r18, 0x4B	; 75
 74e:	42 e0       	ldi	r20, 0x02	; 2
 750:	65 e0       	ldi	r22, 0x05	; 5
 752:	83 e0       	ldi	r24, 0x03	; 3
 754:	25 de       	rcall	.-950    	; 0x3a0 <ansi_draw_box>
	
	//Set Title
	ansi_set_attrcolor(0,ANSI_FC_RED);
 756:	6f e1       	ldi	r22, 0x1F	; 31
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	17 dd       	rcall	.-1490   	; 0x18a <ansi_set_attrcolor>
	ansi_write_xcenter(4,"Welcome To AVR UART Ansi Display");
 75c:	63 e5       	ldi	r22, 0x53	; 83
 75e:	71 e0       	ldi	r23, 0x01	; 1
 760:	84 e0       	ldi	r24, 0x04	; 4
 762:	81 dd       	rcall	.-1278   	; 0x266 <ansi_write_xcenter>

	//DrawBox
	ansi_set_attrcolor(ANSI_ATR_BOLD,ANSI_FC_YELLOW);
 764:	61 e2       	ldi	r22, 0x21	; 33
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	10 dd       	rcall	.-1504   	; 0x18a <ansi_set_attrcolor>
	ansi_draw_box(ANSI_CT_DOUBLE,5,7,75,13);
 76a:	0d e0       	ldi	r16, 0x0D	; 13
 76c:	2b e4       	ldi	r18, 0x4B	; 75
 76e:	47 e0       	ldi	r20, 0x07	; 7
 770:	65 e0       	ldi	r22, 0x05	; 5
 772:	84 e0       	ldi	r24, 0x04	; 4
 774:	15 de       	rcall	.-982    	; 0x3a0 <ansi_draw_box>

	//Set Content 1
	ansi_set_attrcolorbc(0,ANSI_FC_WHITE,ANSI_BC_GREEN);
 776:	4a e2       	ldi	r20, 0x2A	; 42
 778:	65 e2       	ldi	r22, 0x25	; 37
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	3a dd       	rcall	.-1420   	; 0x1f2 <ansi_set_attrcolorbc>
	ansi_write_xcenter(9,"Text With BackGround Color");
 77e:	64 e7       	ldi	r22, 0x74	; 116
 780:	71 e0       	ldi	r23, 0x01	; 1
 782:	89 e0       	ldi	r24, 0x09	; 9
 784:	70 dd       	rcall	.-1312   	; 0x266 <ansi_write_xcenter>
	
	//Set Content 2
	ansi_set_attrcolorbc(0,ANSI_FC_GREEN,ANSI_BC_WHITE);
 786:	4f e2       	ldi	r20, 0x2F	; 47
 788:	60 e2       	ldi	r22, 0x20	; 32
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	32 dd       	rcall	.-1436   	; 0x1f2 <ansi_set_attrcolorbc>
	ansi_write_xcenter(11,"Text With BackGround Color");
 78e:	64 e7       	ldi	r22, 0x74	; 116
 790:	71 e0       	ldi	r23, 0x01	; 1
 792:	8b e0       	ldi	r24, 0x0B	; 11
 794:	68 dd       	rcall	.-1328   	; 0x266 <ansi_write_xcenter>
	
	//Command Prompt
	ansi_set_attrcolorbc(0,ANSI_FC_WHITE,ANSI_BC_BLACK);
 796:	48 e2       	ldi	r20, 0x28	; 40
 798:	65 e2       	ldi	r22, 0x25	; 37
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	2a dd       	rcall	.-1452   	; 0x1f2 <ansi_set_attrcolorbc>
	ansi_write_pos(5,20,">>");
 79e:	4f e8       	ldi	r20, 0x8F	; 143
 7a0:	51 e0       	ldi	r21, 0x01	; 1
 7a2:	64 e1       	ldi	r22, 0x14	; 20
 7a4:	85 e0       	ldi	r24, 0x05	; 5
 7a6:	a5 dd       	rcall	.-1206   	; 0x2f2 <ansi_write_pos>
	
	StartTimer = 1;
 7a8:	c0 93 96 01 	sts	0x0196, r28	; 0x800196 <StartTimer>
	
	char ReceivedData;
    while (1) 
    {
		//Read Received Char And Send it Back
		ReceivedData = uart_getchar();
 7ac:	75 d0       	rcall	.+234    	; 0x898 <uart_getchar>
		if (ReceivedData != 0x00)
 7ae:	88 23       	and	r24, r24
 7b0:	e9 f3       	breq	.-6      	; 0x7ac <main+0x112>
			uart_putc(ReceivedData);				
 7b2:	86 d0       	rcall	.+268    	; 0x8c0 <uart_putc>
 7b4:	fb cf       	rjmp	.-10     	; 0x7ac <main+0x112>

000007b6 <__vector_18>:
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 7b6:	1f 92       	push	r1
 7b8:	0f 92       	push	r0
 7ba:	0f b6       	in	r0, 0x3f	; 63
 7bc:	0f 92       	push	r0
 7be:	11 24       	eor	r1, r1
 7c0:	2f 93       	push	r18
 7c2:	8f 93       	push	r24
 7c4:	9f 93       	push	r25
 7c6:	ef 93       	push	r30
 7c8:	ff 93       	push	r31
 7ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 7ce:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 7d2:	8c 71       	andi	r24, 0x1C	; 28
 7d4:	e0 91 99 01 	lds	r30, 0x0199	; 0x800199 <UART_RxHead>
 7d8:	ef 5f       	subi	r30, 0xFF	; 255
 7da:	ef 71       	andi	r30, 0x1F	; 31
 7dc:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <UART_RxTail>
 7e0:	e9 17       	cp	r30, r25
 7e2:	39 f0       	breq	.+14     	; 0x7f2 <__vector_18+0x3c>
 7e4:	e0 93 99 01 	sts	0x0199, r30	; 0x800199 <UART_RxHead>
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	e4 56       	subi	r30, 0x64	; 100
 7ec:	fe 4f       	sbci	r31, 0xFE	; 254
 7ee:	20 83       	st	Z, r18
 7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <__vector_18+0x3e>
 7f2:	82 e0       	ldi	r24, 0x02	; 2
 7f4:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <UART_LastRxError>
 7f8:	89 2b       	or	r24, r25
 7fa:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <UART_LastRxError>
 7fe:	ff 91       	pop	r31
 800:	ef 91       	pop	r30
 802:	9f 91       	pop	r25
 804:	8f 91       	pop	r24
 806:	2f 91       	pop	r18
 808:	0f 90       	pop	r0
 80a:	0f be       	out	0x3f, r0	; 63
 80c:	0f 90       	pop	r0
 80e:	1f 90       	pop	r1
 810:	18 95       	reti

00000812 <__vector_19>:
 812:	1f 92       	push	r1
 814:	0f 92       	push	r0
 816:	0f b6       	in	r0, 0x3f	; 63
 818:	0f 92       	push	r0
 81a:	11 24       	eor	r1, r1
 81c:	8f 93       	push	r24
 81e:	9f 93       	push	r25
 820:	ef 93       	push	r30
 822:	ff 93       	push	r31
 824:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <UART_TxHead>
 828:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <UART_TxTail>
 82c:	98 17       	cp	r25, r24
 82e:	69 f0       	breq	.+26     	; 0x84a <__vector_19+0x38>
 830:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <UART_TxTail>
 834:	ef 5f       	subi	r30, 0xFF	; 255
 836:	ef 71       	andi	r30, 0x1F	; 31
 838:	e0 93 9a 01 	sts	0x019A, r30	; 0x80019a <UART_TxTail>
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	e4 54       	subi	r30, 0x44	; 68
 840:	fe 4f       	sbci	r31, 0xFE	; 254
 842:	80 81       	ld	r24, Z
 844:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
 848:	05 c0       	rjmp	.+10     	; 0x854 <__vector_19+0x42>
 84a:	e1 ec       	ldi	r30, 0xC1	; 193
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	8f 7d       	andi	r24, 0xDF	; 223
 852:	80 83       	st	Z, r24
 854:	ff 91       	pop	r31
 856:	ef 91       	pop	r30
 858:	9f 91       	pop	r25
 85a:	8f 91       	pop	r24
 85c:	0f 90       	pop	r0
 85e:	0f be       	out	0x3f, r0	; 63
 860:	0f 90       	pop	r0
 862:	1f 90       	pop	r1
 864:	18 95       	reti

00000866 <uart_init>:
 866:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <UART_TxHead>
 86a:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <UART_TxTail>
 86e:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <UART_RxHead>
 872:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <UART_RxTail>
 876:	99 23       	and	r25, r25
 878:	1c f4       	brge	.+6      	; 0x880 <uart_init+0x1a>
 87a:	22 e0       	ldi	r18, 0x02	; 2
 87c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 880:	90 78       	andi	r25, 0x80	; 128
 882:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 886:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 88a:	88 e9       	ldi	r24, 0x98	; 152
 88c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
 890:	86 e0       	ldi	r24, 0x06	; 6
 892:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
 896:	08 95       	ret

00000898 <uart_getchar>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 898:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <UART_RxHead>
 89c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <UART_RxTail>
 8a0:	98 17       	cp	r25, r24
 8a2:	61 f0       	breq	.+24     	; 0x8bc <uart_getchar+0x24>
        return 0x00;   /* no data available */
    }
    
    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 8a4:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <UART_RxTail>
 8a8:	9f 5f       	subi	r25, 0xFF	; 255
 8aa:	9f 71       	andi	r25, 0x1F	; 31
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 8ac:	e9 2f       	mov	r30, r25
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	e4 56       	subi	r30, 0x64	; 100
 8b2:	fe 4f       	sbci	r31, 0xFE	; 254
 8b4:	80 81       	ld	r24, Z
    
    /* store buffer index */
    UART_RxTail = tmptail; 
 8b6:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <UART_RxTail>
    
    return  data;
 8ba:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return 0x00;   /* no data available */
 8bc:	80 e0       	ldi	r24, 0x00	; 0
    /* store buffer index */
    UART_RxTail = tmptail; 
    
    return  data;

}/* uart_getc */
 8be:	08 95       	ret

000008c0 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 8c0:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <UART_TxHead>
 8c4:	2f 5f       	subi	r18, 0xFF	; 255
 8c6:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 8c8:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <UART_TxTail>
 8cc:	29 17       	cp	r18, r25
 8ce:	e1 f3       	breq	.-8      	; 0x8c8 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 8d0:	e2 2f       	mov	r30, r18
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	e4 54       	subi	r30, 0x44	; 68
 8d6:	fe 4f       	sbci	r31, 0xFE	; 254
 8d8:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 8da:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 8de:	e1 ec       	ldi	r30, 0xC1	; 193
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	80 62       	ori	r24, 0x20	; 32
 8e6:	80 83       	st	Z, r24
 8e8:	08 95       	ret

000008ea <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 8ea:	cf 93       	push	r28
 8ec:	df 93       	push	r29
 8ee:	ec 01       	movw	r28, r24
    while (*s) 
 8f0:	88 81       	ld	r24, Y
 8f2:	88 23       	and	r24, r24
 8f4:	29 f0       	breq	.+10     	; 0x900 <uart_puts+0x16>
 8f6:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 8f8:	e3 df       	rcall	.-58     	; 0x8c0 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 8fa:	89 91       	ld	r24, Y+
 8fc:	81 11       	cpse	r24, r1
 8fe:	fc cf       	rjmp	.-8      	; 0x8f8 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	08 95       	ret

00000906 <__divmodhi4>:
 906:	97 fb       	bst	r25, 7
 908:	07 2e       	mov	r0, r23
 90a:	16 f4       	brtc	.+4      	; 0x910 <__divmodhi4+0xa>
 90c:	00 94       	com	r0
 90e:	06 d0       	rcall	.+12     	; 0x91c <__divmodhi4_neg1>
 910:	77 fd       	sbrc	r23, 7
 912:	08 d0       	rcall	.+16     	; 0x924 <__divmodhi4_neg2>
 914:	0b d0       	rcall	.+22     	; 0x92c <__udivmodhi4>
 916:	07 fc       	sbrc	r0, 7
 918:	05 d0       	rcall	.+10     	; 0x924 <__divmodhi4_neg2>
 91a:	3e f4       	brtc	.+14     	; 0x92a <__divmodhi4_exit>

0000091c <__divmodhi4_neg1>:
 91c:	90 95       	com	r25
 91e:	81 95       	neg	r24
 920:	9f 4f       	sbci	r25, 0xFF	; 255
 922:	08 95       	ret

00000924 <__divmodhi4_neg2>:
 924:	70 95       	com	r23
 926:	61 95       	neg	r22
 928:	7f 4f       	sbci	r23, 0xFF	; 255

0000092a <__divmodhi4_exit>:
 92a:	08 95       	ret

0000092c <__udivmodhi4>:
 92c:	aa 1b       	sub	r26, r26
 92e:	bb 1b       	sub	r27, r27
 930:	51 e1       	ldi	r21, 0x11	; 17
 932:	07 c0       	rjmp	.+14     	; 0x942 <__udivmodhi4_ep>

00000934 <__udivmodhi4_loop>:
 934:	aa 1f       	adc	r26, r26
 936:	bb 1f       	adc	r27, r27
 938:	a6 17       	cp	r26, r22
 93a:	b7 07       	cpc	r27, r23
 93c:	10 f0       	brcs	.+4      	; 0x942 <__udivmodhi4_ep>
 93e:	a6 1b       	sub	r26, r22
 940:	b7 0b       	sbc	r27, r23

00000942 <__udivmodhi4_ep>:
 942:	88 1f       	adc	r24, r24
 944:	99 1f       	adc	r25, r25
 946:	5a 95       	dec	r21
 948:	a9 f7       	brne	.-22     	; 0x934 <__udivmodhi4_loop>
 94a:	80 95       	com	r24
 94c:	90 95       	com	r25
 94e:	bc 01       	movw	r22, r24
 950:	cd 01       	movw	r24, r26
 952:	08 95       	ret

00000954 <sprintf>:
 954:	ae e0       	ldi	r26, 0x0E	; 14
 956:	b0 e0       	ldi	r27, 0x00	; 0
 958:	ef ea       	ldi	r30, 0xAF	; 175
 95a:	f4 e0       	ldi	r31, 0x04	; 4
 95c:	aa c2       	rjmp	.+1364   	; 0xeb2 <__prologue_saves__+0x1c>
 95e:	0d 89       	ldd	r16, Y+21	; 0x15
 960:	1e 89       	ldd	r17, Y+22	; 0x16
 962:	86 e0       	ldi	r24, 0x06	; 6
 964:	8c 83       	std	Y+4, r24	; 0x04
 966:	1a 83       	std	Y+2, r17	; 0x02
 968:	09 83       	std	Y+1, r16	; 0x01
 96a:	8f ef       	ldi	r24, 0xFF	; 255
 96c:	9f e7       	ldi	r25, 0x7F	; 127
 96e:	9e 83       	std	Y+6, r25	; 0x06
 970:	8d 83       	std	Y+5, r24	; 0x05
 972:	ae 01       	movw	r20, r28
 974:	47 5e       	subi	r20, 0xE7	; 231
 976:	5f 4f       	sbci	r21, 0xFF	; 255
 978:	6f 89       	ldd	r22, Y+23	; 0x17
 97a:	78 8d       	ldd	r23, Y+24	; 0x18
 97c:	ce 01       	movw	r24, r28
 97e:	01 96       	adiw	r24, 0x01	; 1
 980:	08 d0       	rcall	.+16     	; 0x992 <vfprintf>
 982:	ef 81       	ldd	r30, Y+7	; 0x07
 984:	f8 85       	ldd	r31, Y+8	; 0x08
 986:	e0 0f       	add	r30, r16
 988:	f1 1f       	adc	r31, r17
 98a:	10 82       	st	Z, r1
 98c:	2e 96       	adiw	r28, 0x0e	; 14
 98e:	e4 e0       	ldi	r30, 0x04	; 4
 990:	ac c2       	rjmp	.+1368   	; 0xeea <__epilogue_restores__+0x1c>

00000992 <vfprintf>:
 992:	ab e0       	ldi	r26, 0x0B	; 11
 994:	b0 e0       	ldi	r27, 0x00	; 0
 996:	ee ec       	ldi	r30, 0xCE	; 206
 998:	f4 e0       	ldi	r31, 0x04	; 4
 99a:	7d c2       	rjmp	.+1274   	; 0xe96 <__prologue_saves__>
 99c:	6c 01       	movw	r12, r24
 99e:	7b 01       	movw	r14, r22
 9a0:	8a 01       	movw	r16, r20
 9a2:	fc 01       	movw	r30, r24
 9a4:	17 82       	std	Z+7, r1	; 0x07
 9a6:	16 82       	std	Z+6, r1	; 0x06
 9a8:	83 81       	ldd	r24, Z+3	; 0x03
 9aa:	81 ff       	sbrs	r24, 1
 9ac:	bf c1       	rjmp	.+894    	; 0xd2c <vfprintf+0x39a>
 9ae:	ce 01       	movw	r24, r28
 9b0:	01 96       	adiw	r24, 0x01	; 1
 9b2:	3c 01       	movw	r6, r24
 9b4:	f6 01       	movw	r30, r12
 9b6:	93 81       	ldd	r25, Z+3	; 0x03
 9b8:	f7 01       	movw	r30, r14
 9ba:	93 fd       	sbrc	r25, 3
 9bc:	85 91       	lpm	r24, Z+
 9be:	93 ff       	sbrs	r25, 3
 9c0:	81 91       	ld	r24, Z+
 9c2:	7f 01       	movw	r14, r30
 9c4:	88 23       	and	r24, r24
 9c6:	09 f4       	brne	.+2      	; 0x9ca <vfprintf+0x38>
 9c8:	ad c1       	rjmp	.+858    	; 0xd24 <vfprintf+0x392>
 9ca:	85 32       	cpi	r24, 0x25	; 37
 9cc:	39 f4       	brne	.+14     	; 0x9dc <vfprintf+0x4a>
 9ce:	93 fd       	sbrc	r25, 3
 9d0:	85 91       	lpm	r24, Z+
 9d2:	93 ff       	sbrs	r25, 3
 9d4:	81 91       	ld	r24, Z+
 9d6:	7f 01       	movw	r14, r30
 9d8:	85 32       	cpi	r24, 0x25	; 37
 9da:	21 f4       	brne	.+8      	; 0x9e4 <vfprintf+0x52>
 9dc:	b6 01       	movw	r22, r12
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	c0 d1       	rcall	.+896    	; 0xd62 <fputc>
 9e2:	e8 cf       	rjmp	.-48     	; 0x9b4 <vfprintf+0x22>
 9e4:	91 2c       	mov	r9, r1
 9e6:	21 2c       	mov	r2, r1
 9e8:	31 2c       	mov	r3, r1
 9ea:	ff e1       	ldi	r31, 0x1F	; 31
 9ec:	f3 15       	cp	r31, r3
 9ee:	d8 f0       	brcs	.+54     	; 0xa26 <vfprintf+0x94>
 9f0:	8b 32       	cpi	r24, 0x2B	; 43
 9f2:	79 f0       	breq	.+30     	; 0xa12 <vfprintf+0x80>
 9f4:	38 f4       	brcc	.+14     	; 0xa04 <vfprintf+0x72>
 9f6:	80 32       	cpi	r24, 0x20	; 32
 9f8:	79 f0       	breq	.+30     	; 0xa18 <vfprintf+0x86>
 9fa:	83 32       	cpi	r24, 0x23	; 35
 9fc:	a1 f4       	brne	.+40     	; 0xa26 <vfprintf+0x94>
 9fe:	23 2d       	mov	r18, r3
 a00:	20 61       	ori	r18, 0x10	; 16
 a02:	1d c0       	rjmp	.+58     	; 0xa3e <vfprintf+0xac>
 a04:	8d 32       	cpi	r24, 0x2D	; 45
 a06:	61 f0       	breq	.+24     	; 0xa20 <vfprintf+0x8e>
 a08:	80 33       	cpi	r24, 0x30	; 48
 a0a:	69 f4       	brne	.+26     	; 0xa26 <vfprintf+0x94>
 a0c:	23 2d       	mov	r18, r3
 a0e:	21 60       	ori	r18, 0x01	; 1
 a10:	16 c0       	rjmp	.+44     	; 0xa3e <vfprintf+0xac>
 a12:	83 2d       	mov	r24, r3
 a14:	82 60       	ori	r24, 0x02	; 2
 a16:	38 2e       	mov	r3, r24
 a18:	e3 2d       	mov	r30, r3
 a1a:	e4 60       	ori	r30, 0x04	; 4
 a1c:	3e 2e       	mov	r3, r30
 a1e:	2a c0       	rjmp	.+84     	; 0xa74 <vfprintf+0xe2>
 a20:	f3 2d       	mov	r31, r3
 a22:	f8 60       	ori	r31, 0x08	; 8
 a24:	1d c0       	rjmp	.+58     	; 0xa60 <vfprintf+0xce>
 a26:	37 fc       	sbrc	r3, 7
 a28:	2d c0       	rjmp	.+90     	; 0xa84 <vfprintf+0xf2>
 a2a:	20 ed       	ldi	r18, 0xD0	; 208
 a2c:	28 0f       	add	r18, r24
 a2e:	2a 30       	cpi	r18, 0x0A	; 10
 a30:	40 f0       	brcs	.+16     	; 0xa42 <vfprintf+0xb0>
 a32:	8e 32       	cpi	r24, 0x2E	; 46
 a34:	b9 f4       	brne	.+46     	; 0xa64 <vfprintf+0xd2>
 a36:	36 fc       	sbrc	r3, 6
 a38:	75 c1       	rjmp	.+746    	; 0xd24 <vfprintf+0x392>
 a3a:	23 2d       	mov	r18, r3
 a3c:	20 64       	ori	r18, 0x40	; 64
 a3e:	32 2e       	mov	r3, r18
 a40:	19 c0       	rjmp	.+50     	; 0xa74 <vfprintf+0xe2>
 a42:	36 fe       	sbrs	r3, 6
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <vfprintf+0xc0>
 a46:	8a e0       	ldi	r24, 0x0A	; 10
 a48:	98 9e       	mul	r9, r24
 a4a:	20 0d       	add	r18, r0
 a4c:	11 24       	eor	r1, r1
 a4e:	92 2e       	mov	r9, r18
 a50:	11 c0       	rjmp	.+34     	; 0xa74 <vfprintf+0xe2>
 a52:	ea e0       	ldi	r30, 0x0A	; 10
 a54:	2e 9e       	mul	r2, r30
 a56:	20 0d       	add	r18, r0
 a58:	11 24       	eor	r1, r1
 a5a:	22 2e       	mov	r2, r18
 a5c:	f3 2d       	mov	r31, r3
 a5e:	f0 62       	ori	r31, 0x20	; 32
 a60:	3f 2e       	mov	r3, r31
 a62:	08 c0       	rjmp	.+16     	; 0xa74 <vfprintf+0xe2>
 a64:	8c 36       	cpi	r24, 0x6C	; 108
 a66:	21 f4       	brne	.+8      	; 0xa70 <vfprintf+0xde>
 a68:	83 2d       	mov	r24, r3
 a6a:	80 68       	ori	r24, 0x80	; 128
 a6c:	38 2e       	mov	r3, r24
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <vfprintf+0xe2>
 a70:	88 36       	cpi	r24, 0x68	; 104
 a72:	41 f4       	brne	.+16     	; 0xa84 <vfprintf+0xf2>
 a74:	f7 01       	movw	r30, r14
 a76:	93 fd       	sbrc	r25, 3
 a78:	85 91       	lpm	r24, Z+
 a7a:	93 ff       	sbrs	r25, 3
 a7c:	81 91       	ld	r24, Z+
 a7e:	7f 01       	movw	r14, r30
 a80:	81 11       	cpse	r24, r1
 a82:	b3 cf       	rjmp	.-154    	; 0x9ea <vfprintf+0x58>
 a84:	98 2f       	mov	r25, r24
 a86:	9f 7d       	andi	r25, 0xDF	; 223
 a88:	95 54       	subi	r25, 0x45	; 69
 a8a:	93 30       	cpi	r25, 0x03	; 3
 a8c:	28 f4       	brcc	.+10     	; 0xa98 <vfprintf+0x106>
 a8e:	0c 5f       	subi	r16, 0xFC	; 252
 a90:	1f 4f       	sbci	r17, 0xFF	; 255
 a92:	9f e3       	ldi	r25, 0x3F	; 63
 a94:	99 83       	std	Y+1, r25	; 0x01
 a96:	0d c0       	rjmp	.+26     	; 0xab2 <vfprintf+0x120>
 a98:	83 36       	cpi	r24, 0x63	; 99
 a9a:	31 f0       	breq	.+12     	; 0xaa8 <vfprintf+0x116>
 a9c:	83 37       	cpi	r24, 0x73	; 115
 a9e:	71 f0       	breq	.+28     	; 0xabc <vfprintf+0x12a>
 aa0:	83 35       	cpi	r24, 0x53	; 83
 aa2:	09 f0       	breq	.+2      	; 0xaa6 <vfprintf+0x114>
 aa4:	55 c0       	rjmp	.+170    	; 0xb50 <vfprintf+0x1be>
 aa6:	20 c0       	rjmp	.+64     	; 0xae8 <vfprintf+0x156>
 aa8:	f8 01       	movw	r30, r16
 aaa:	80 81       	ld	r24, Z
 aac:	89 83       	std	Y+1, r24	; 0x01
 aae:	0e 5f       	subi	r16, 0xFE	; 254
 ab0:	1f 4f       	sbci	r17, 0xFF	; 255
 ab2:	88 24       	eor	r8, r8
 ab4:	83 94       	inc	r8
 ab6:	91 2c       	mov	r9, r1
 ab8:	53 01       	movw	r10, r6
 aba:	12 c0       	rjmp	.+36     	; 0xae0 <vfprintf+0x14e>
 abc:	28 01       	movw	r4, r16
 abe:	f2 e0       	ldi	r31, 0x02	; 2
 ac0:	4f 0e       	add	r4, r31
 ac2:	51 1c       	adc	r5, r1
 ac4:	f8 01       	movw	r30, r16
 ac6:	a0 80       	ld	r10, Z
 ac8:	b1 80       	ldd	r11, Z+1	; 0x01
 aca:	36 fe       	sbrs	r3, 6
 acc:	03 c0       	rjmp	.+6      	; 0xad4 <vfprintf+0x142>
 ace:	69 2d       	mov	r22, r9
 ad0:	70 e0       	ldi	r23, 0x00	; 0
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <vfprintf+0x146>
 ad4:	6f ef       	ldi	r22, 0xFF	; 255
 ad6:	7f ef       	ldi	r23, 0xFF	; 255
 ad8:	c5 01       	movw	r24, r10
 ada:	38 d1       	rcall	.+624    	; 0xd4c <strnlen>
 adc:	4c 01       	movw	r8, r24
 ade:	82 01       	movw	r16, r4
 ae0:	f3 2d       	mov	r31, r3
 ae2:	ff 77       	andi	r31, 0x7F	; 127
 ae4:	3f 2e       	mov	r3, r31
 ae6:	15 c0       	rjmp	.+42     	; 0xb12 <vfprintf+0x180>
 ae8:	28 01       	movw	r4, r16
 aea:	22 e0       	ldi	r18, 0x02	; 2
 aec:	42 0e       	add	r4, r18
 aee:	51 1c       	adc	r5, r1
 af0:	f8 01       	movw	r30, r16
 af2:	a0 80       	ld	r10, Z
 af4:	b1 80       	ldd	r11, Z+1	; 0x01
 af6:	36 fe       	sbrs	r3, 6
 af8:	03 c0       	rjmp	.+6      	; 0xb00 <vfprintf+0x16e>
 afa:	69 2d       	mov	r22, r9
 afc:	70 e0       	ldi	r23, 0x00	; 0
 afe:	02 c0       	rjmp	.+4      	; 0xb04 <vfprintf+0x172>
 b00:	6f ef       	ldi	r22, 0xFF	; 255
 b02:	7f ef       	ldi	r23, 0xFF	; 255
 b04:	c5 01       	movw	r24, r10
 b06:	17 d1       	rcall	.+558    	; 0xd36 <strnlen_P>
 b08:	4c 01       	movw	r8, r24
 b0a:	f3 2d       	mov	r31, r3
 b0c:	f0 68       	ori	r31, 0x80	; 128
 b0e:	3f 2e       	mov	r3, r31
 b10:	82 01       	movw	r16, r4
 b12:	33 fc       	sbrc	r3, 3
 b14:	19 c0       	rjmp	.+50     	; 0xb48 <vfprintf+0x1b6>
 b16:	82 2d       	mov	r24, r2
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	88 16       	cp	r8, r24
 b1c:	99 06       	cpc	r9, r25
 b1e:	a0 f4       	brcc	.+40     	; 0xb48 <vfprintf+0x1b6>
 b20:	b6 01       	movw	r22, r12
 b22:	80 e2       	ldi	r24, 0x20	; 32
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	1d d1       	rcall	.+570    	; 0xd62 <fputc>
 b28:	2a 94       	dec	r2
 b2a:	f5 cf       	rjmp	.-22     	; 0xb16 <vfprintf+0x184>
 b2c:	f5 01       	movw	r30, r10
 b2e:	37 fc       	sbrc	r3, 7
 b30:	85 91       	lpm	r24, Z+
 b32:	37 fe       	sbrs	r3, 7
 b34:	81 91       	ld	r24, Z+
 b36:	5f 01       	movw	r10, r30
 b38:	b6 01       	movw	r22, r12
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	12 d1       	rcall	.+548    	; 0xd62 <fputc>
 b3e:	21 10       	cpse	r2, r1
 b40:	2a 94       	dec	r2
 b42:	21 e0       	ldi	r18, 0x01	; 1
 b44:	82 1a       	sub	r8, r18
 b46:	91 08       	sbc	r9, r1
 b48:	81 14       	cp	r8, r1
 b4a:	91 04       	cpc	r9, r1
 b4c:	79 f7       	brne	.-34     	; 0xb2c <vfprintf+0x19a>
 b4e:	e1 c0       	rjmp	.+450    	; 0xd12 <vfprintf+0x380>
 b50:	84 36       	cpi	r24, 0x64	; 100
 b52:	11 f0       	breq	.+4      	; 0xb58 <vfprintf+0x1c6>
 b54:	89 36       	cpi	r24, 0x69	; 105
 b56:	39 f5       	brne	.+78     	; 0xba6 <vfprintf+0x214>
 b58:	f8 01       	movw	r30, r16
 b5a:	37 fe       	sbrs	r3, 7
 b5c:	07 c0       	rjmp	.+14     	; 0xb6c <vfprintf+0x1da>
 b5e:	60 81       	ld	r22, Z
 b60:	71 81       	ldd	r23, Z+1	; 0x01
 b62:	82 81       	ldd	r24, Z+2	; 0x02
 b64:	93 81       	ldd	r25, Z+3	; 0x03
 b66:	0c 5f       	subi	r16, 0xFC	; 252
 b68:	1f 4f       	sbci	r17, 0xFF	; 255
 b6a:	08 c0       	rjmp	.+16     	; 0xb7c <vfprintf+0x1ea>
 b6c:	60 81       	ld	r22, Z
 b6e:	71 81       	ldd	r23, Z+1	; 0x01
 b70:	07 2e       	mov	r0, r23
 b72:	00 0c       	add	r0, r0
 b74:	88 0b       	sbc	r24, r24
 b76:	99 0b       	sbc	r25, r25
 b78:	0e 5f       	subi	r16, 0xFE	; 254
 b7a:	1f 4f       	sbci	r17, 0xFF	; 255
 b7c:	f3 2d       	mov	r31, r3
 b7e:	ff 76       	andi	r31, 0x6F	; 111
 b80:	3f 2e       	mov	r3, r31
 b82:	97 ff       	sbrs	r25, 7
 b84:	09 c0       	rjmp	.+18     	; 0xb98 <vfprintf+0x206>
 b86:	90 95       	com	r25
 b88:	80 95       	com	r24
 b8a:	70 95       	com	r23
 b8c:	61 95       	neg	r22
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	f0 68       	ori	r31, 0x80	; 128
 b96:	3f 2e       	mov	r3, r31
 b98:	2a e0       	ldi	r18, 0x0A	; 10
 b9a:	30 e0       	ldi	r19, 0x00	; 0
 b9c:	a3 01       	movw	r20, r6
 b9e:	1d d1       	rcall	.+570    	; 0xdda <__ultoa_invert>
 ba0:	88 2e       	mov	r8, r24
 ba2:	86 18       	sub	r8, r6
 ba4:	44 c0       	rjmp	.+136    	; 0xc2e <vfprintf+0x29c>
 ba6:	85 37       	cpi	r24, 0x75	; 117
 ba8:	31 f4       	brne	.+12     	; 0xbb6 <vfprintf+0x224>
 baa:	23 2d       	mov	r18, r3
 bac:	2f 7e       	andi	r18, 0xEF	; 239
 bae:	b2 2e       	mov	r11, r18
 bb0:	2a e0       	ldi	r18, 0x0A	; 10
 bb2:	30 e0       	ldi	r19, 0x00	; 0
 bb4:	25 c0       	rjmp	.+74     	; 0xc00 <vfprintf+0x26e>
 bb6:	93 2d       	mov	r25, r3
 bb8:	99 7f       	andi	r25, 0xF9	; 249
 bba:	b9 2e       	mov	r11, r25
 bbc:	8f 36       	cpi	r24, 0x6F	; 111
 bbe:	c1 f0       	breq	.+48     	; 0xbf0 <vfprintf+0x25e>
 bc0:	18 f4       	brcc	.+6      	; 0xbc8 <vfprintf+0x236>
 bc2:	88 35       	cpi	r24, 0x58	; 88
 bc4:	79 f0       	breq	.+30     	; 0xbe4 <vfprintf+0x252>
 bc6:	ae c0       	rjmp	.+348    	; 0xd24 <vfprintf+0x392>
 bc8:	80 37       	cpi	r24, 0x70	; 112
 bca:	19 f0       	breq	.+6      	; 0xbd2 <vfprintf+0x240>
 bcc:	88 37       	cpi	r24, 0x78	; 120
 bce:	21 f0       	breq	.+8      	; 0xbd8 <vfprintf+0x246>
 bd0:	a9 c0       	rjmp	.+338    	; 0xd24 <vfprintf+0x392>
 bd2:	e9 2f       	mov	r30, r25
 bd4:	e0 61       	ori	r30, 0x10	; 16
 bd6:	be 2e       	mov	r11, r30
 bd8:	b4 fe       	sbrs	r11, 4
 bda:	0d c0       	rjmp	.+26     	; 0xbf6 <vfprintf+0x264>
 bdc:	fb 2d       	mov	r31, r11
 bde:	f4 60       	ori	r31, 0x04	; 4
 be0:	bf 2e       	mov	r11, r31
 be2:	09 c0       	rjmp	.+18     	; 0xbf6 <vfprintf+0x264>
 be4:	34 fe       	sbrs	r3, 4
 be6:	0a c0       	rjmp	.+20     	; 0xbfc <vfprintf+0x26a>
 be8:	29 2f       	mov	r18, r25
 bea:	26 60       	ori	r18, 0x06	; 6
 bec:	b2 2e       	mov	r11, r18
 bee:	06 c0       	rjmp	.+12     	; 0xbfc <vfprintf+0x26a>
 bf0:	28 e0       	ldi	r18, 0x08	; 8
 bf2:	30 e0       	ldi	r19, 0x00	; 0
 bf4:	05 c0       	rjmp	.+10     	; 0xc00 <vfprintf+0x26e>
 bf6:	20 e1       	ldi	r18, 0x10	; 16
 bf8:	30 e0       	ldi	r19, 0x00	; 0
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vfprintf+0x26e>
 bfc:	20 e1       	ldi	r18, 0x10	; 16
 bfe:	32 e0       	ldi	r19, 0x02	; 2
 c00:	f8 01       	movw	r30, r16
 c02:	b7 fe       	sbrs	r11, 7
 c04:	07 c0       	rjmp	.+14     	; 0xc14 <vfprintf+0x282>
 c06:	60 81       	ld	r22, Z
 c08:	71 81       	ldd	r23, Z+1	; 0x01
 c0a:	82 81       	ldd	r24, Z+2	; 0x02
 c0c:	93 81       	ldd	r25, Z+3	; 0x03
 c0e:	0c 5f       	subi	r16, 0xFC	; 252
 c10:	1f 4f       	sbci	r17, 0xFF	; 255
 c12:	06 c0       	rjmp	.+12     	; 0xc20 <vfprintf+0x28e>
 c14:	60 81       	ld	r22, Z
 c16:	71 81       	ldd	r23, Z+1	; 0x01
 c18:	80 e0       	ldi	r24, 0x00	; 0
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	0e 5f       	subi	r16, 0xFE	; 254
 c1e:	1f 4f       	sbci	r17, 0xFF	; 255
 c20:	a3 01       	movw	r20, r6
 c22:	db d0       	rcall	.+438    	; 0xdda <__ultoa_invert>
 c24:	88 2e       	mov	r8, r24
 c26:	86 18       	sub	r8, r6
 c28:	fb 2d       	mov	r31, r11
 c2a:	ff 77       	andi	r31, 0x7F	; 127
 c2c:	3f 2e       	mov	r3, r31
 c2e:	36 fe       	sbrs	r3, 6
 c30:	0d c0       	rjmp	.+26     	; 0xc4c <vfprintf+0x2ba>
 c32:	23 2d       	mov	r18, r3
 c34:	2e 7f       	andi	r18, 0xFE	; 254
 c36:	a2 2e       	mov	r10, r18
 c38:	89 14       	cp	r8, r9
 c3a:	58 f4       	brcc	.+22     	; 0xc52 <vfprintf+0x2c0>
 c3c:	34 fe       	sbrs	r3, 4
 c3e:	0b c0       	rjmp	.+22     	; 0xc56 <vfprintf+0x2c4>
 c40:	32 fc       	sbrc	r3, 2
 c42:	09 c0       	rjmp	.+18     	; 0xc56 <vfprintf+0x2c4>
 c44:	83 2d       	mov	r24, r3
 c46:	8e 7e       	andi	r24, 0xEE	; 238
 c48:	a8 2e       	mov	r10, r24
 c4a:	05 c0       	rjmp	.+10     	; 0xc56 <vfprintf+0x2c4>
 c4c:	b8 2c       	mov	r11, r8
 c4e:	a3 2c       	mov	r10, r3
 c50:	03 c0       	rjmp	.+6      	; 0xc58 <vfprintf+0x2c6>
 c52:	b8 2c       	mov	r11, r8
 c54:	01 c0       	rjmp	.+2      	; 0xc58 <vfprintf+0x2c6>
 c56:	b9 2c       	mov	r11, r9
 c58:	a4 fe       	sbrs	r10, 4
 c5a:	0f c0       	rjmp	.+30     	; 0xc7a <vfprintf+0x2e8>
 c5c:	fe 01       	movw	r30, r28
 c5e:	e8 0d       	add	r30, r8
 c60:	f1 1d       	adc	r31, r1
 c62:	80 81       	ld	r24, Z
 c64:	80 33       	cpi	r24, 0x30	; 48
 c66:	21 f4       	brne	.+8      	; 0xc70 <vfprintf+0x2de>
 c68:	9a 2d       	mov	r25, r10
 c6a:	99 7e       	andi	r25, 0xE9	; 233
 c6c:	a9 2e       	mov	r10, r25
 c6e:	09 c0       	rjmp	.+18     	; 0xc82 <vfprintf+0x2f0>
 c70:	a2 fe       	sbrs	r10, 2
 c72:	06 c0       	rjmp	.+12     	; 0xc80 <vfprintf+0x2ee>
 c74:	b3 94       	inc	r11
 c76:	b3 94       	inc	r11
 c78:	04 c0       	rjmp	.+8      	; 0xc82 <vfprintf+0x2f0>
 c7a:	8a 2d       	mov	r24, r10
 c7c:	86 78       	andi	r24, 0x86	; 134
 c7e:	09 f0       	breq	.+2      	; 0xc82 <vfprintf+0x2f0>
 c80:	b3 94       	inc	r11
 c82:	a3 fc       	sbrc	r10, 3
 c84:	10 c0       	rjmp	.+32     	; 0xca6 <vfprintf+0x314>
 c86:	a0 fe       	sbrs	r10, 0
 c88:	06 c0       	rjmp	.+12     	; 0xc96 <vfprintf+0x304>
 c8a:	b2 14       	cp	r11, r2
 c8c:	80 f4       	brcc	.+32     	; 0xcae <vfprintf+0x31c>
 c8e:	28 0c       	add	r2, r8
 c90:	92 2c       	mov	r9, r2
 c92:	9b 18       	sub	r9, r11
 c94:	0d c0       	rjmp	.+26     	; 0xcb0 <vfprintf+0x31e>
 c96:	b2 14       	cp	r11, r2
 c98:	58 f4       	brcc	.+22     	; 0xcb0 <vfprintf+0x31e>
 c9a:	b6 01       	movw	r22, r12
 c9c:	80 e2       	ldi	r24, 0x20	; 32
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	60 d0       	rcall	.+192    	; 0xd62 <fputc>
 ca2:	b3 94       	inc	r11
 ca4:	f8 cf       	rjmp	.-16     	; 0xc96 <vfprintf+0x304>
 ca6:	b2 14       	cp	r11, r2
 ca8:	18 f4       	brcc	.+6      	; 0xcb0 <vfprintf+0x31e>
 caa:	2b 18       	sub	r2, r11
 cac:	02 c0       	rjmp	.+4      	; 0xcb2 <vfprintf+0x320>
 cae:	98 2c       	mov	r9, r8
 cb0:	21 2c       	mov	r2, r1
 cb2:	a4 fe       	sbrs	r10, 4
 cb4:	0f c0       	rjmp	.+30     	; 0xcd4 <vfprintf+0x342>
 cb6:	b6 01       	movw	r22, r12
 cb8:	80 e3       	ldi	r24, 0x30	; 48
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	52 d0       	rcall	.+164    	; 0xd62 <fputc>
 cbe:	a2 fe       	sbrs	r10, 2
 cc0:	16 c0       	rjmp	.+44     	; 0xcee <vfprintf+0x35c>
 cc2:	a1 fc       	sbrc	r10, 1
 cc4:	03 c0       	rjmp	.+6      	; 0xccc <vfprintf+0x33a>
 cc6:	88 e7       	ldi	r24, 0x78	; 120
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	02 c0       	rjmp	.+4      	; 0xcd0 <vfprintf+0x33e>
 ccc:	88 e5       	ldi	r24, 0x58	; 88
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	b6 01       	movw	r22, r12
 cd2:	0c c0       	rjmp	.+24     	; 0xcec <vfprintf+0x35a>
 cd4:	8a 2d       	mov	r24, r10
 cd6:	86 78       	andi	r24, 0x86	; 134
 cd8:	51 f0       	breq	.+20     	; 0xcee <vfprintf+0x35c>
 cda:	a1 fe       	sbrs	r10, 1
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <vfprintf+0x350>
 cde:	8b e2       	ldi	r24, 0x2B	; 43
 ce0:	01 c0       	rjmp	.+2      	; 0xce4 <vfprintf+0x352>
 ce2:	80 e2       	ldi	r24, 0x20	; 32
 ce4:	a7 fc       	sbrc	r10, 7
 ce6:	8d e2       	ldi	r24, 0x2D	; 45
 ce8:	b6 01       	movw	r22, r12
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	3a d0       	rcall	.+116    	; 0xd62 <fputc>
 cee:	89 14       	cp	r8, r9
 cf0:	30 f4       	brcc	.+12     	; 0xcfe <vfprintf+0x36c>
 cf2:	b6 01       	movw	r22, r12
 cf4:	80 e3       	ldi	r24, 0x30	; 48
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	34 d0       	rcall	.+104    	; 0xd62 <fputc>
 cfa:	9a 94       	dec	r9
 cfc:	f8 cf       	rjmp	.-16     	; 0xcee <vfprintf+0x35c>
 cfe:	8a 94       	dec	r8
 d00:	f3 01       	movw	r30, r6
 d02:	e8 0d       	add	r30, r8
 d04:	f1 1d       	adc	r31, r1
 d06:	80 81       	ld	r24, Z
 d08:	b6 01       	movw	r22, r12
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	2a d0       	rcall	.+84     	; 0xd62 <fputc>
 d0e:	81 10       	cpse	r8, r1
 d10:	f6 cf       	rjmp	.-20     	; 0xcfe <vfprintf+0x36c>
 d12:	22 20       	and	r2, r2
 d14:	09 f4       	brne	.+2      	; 0xd18 <vfprintf+0x386>
 d16:	4e ce       	rjmp	.-868    	; 0x9b4 <vfprintf+0x22>
 d18:	b6 01       	movw	r22, r12
 d1a:	80 e2       	ldi	r24, 0x20	; 32
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	21 d0       	rcall	.+66     	; 0xd62 <fputc>
 d20:	2a 94       	dec	r2
 d22:	f7 cf       	rjmp	.-18     	; 0xd12 <vfprintf+0x380>
 d24:	f6 01       	movw	r30, r12
 d26:	86 81       	ldd	r24, Z+6	; 0x06
 d28:	97 81       	ldd	r25, Z+7	; 0x07
 d2a:	02 c0       	rjmp	.+4      	; 0xd30 <vfprintf+0x39e>
 d2c:	8f ef       	ldi	r24, 0xFF	; 255
 d2e:	9f ef       	ldi	r25, 0xFF	; 255
 d30:	2b 96       	adiw	r28, 0x0b	; 11
 d32:	e2 e1       	ldi	r30, 0x12	; 18
 d34:	cc c0       	rjmp	.+408    	; 0xece <__epilogue_restores__>

00000d36 <strnlen_P>:
 d36:	fc 01       	movw	r30, r24
 d38:	05 90       	lpm	r0, Z+
 d3a:	61 50       	subi	r22, 0x01	; 1
 d3c:	70 40       	sbci	r23, 0x00	; 0
 d3e:	01 10       	cpse	r0, r1
 d40:	d8 f7       	brcc	.-10     	; 0xd38 <strnlen_P+0x2>
 d42:	80 95       	com	r24
 d44:	90 95       	com	r25
 d46:	8e 0f       	add	r24, r30
 d48:	9f 1f       	adc	r25, r31
 d4a:	08 95       	ret

00000d4c <strnlen>:
 d4c:	fc 01       	movw	r30, r24
 d4e:	61 50       	subi	r22, 0x01	; 1
 d50:	70 40       	sbci	r23, 0x00	; 0
 d52:	01 90       	ld	r0, Z+
 d54:	01 10       	cpse	r0, r1
 d56:	d8 f7       	brcc	.-10     	; 0xd4e <strnlen+0x2>
 d58:	80 95       	com	r24
 d5a:	90 95       	com	r25
 d5c:	8e 0f       	add	r24, r30
 d5e:	9f 1f       	adc	r25, r31
 d60:	08 95       	ret

00000d62 <fputc>:
 d62:	0f 93       	push	r16
 d64:	1f 93       	push	r17
 d66:	cf 93       	push	r28
 d68:	df 93       	push	r29
 d6a:	fb 01       	movw	r30, r22
 d6c:	23 81       	ldd	r18, Z+3	; 0x03
 d6e:	21 fd       	sbrc	r18, 1
 d70:	03 c0       	rjmp	.+6      	; 0xd78 <fputc+0x16>
 d72:	8f ef       	ldi	r24, 0xFF	; 255
 d74:	9f ef       	ldi	r25, 0xFF	; 255
 d76:	2c c0       	rjmp	.+88     	; 0xdd0 <fputc+0x6e>
 d78:	22 ff       	sbrs	r18, 2
 d7a:	16 c0       	rjmp	.+44     	; 0xda8 <fputc+0x46>
 d7c:	46 81       	ldd	r20, Z+6	; 0x06
 d7e:	57 81       	ldd	r21, Z+7	; 0x07
 d80:	24 81       	ldd	r18, Z+4	; 0x04
 d82:	35 81       	ldd	r19, Z+5	; 0x05
 d84:	42 17       	cp	r20, r18
 d86:	53 07       	cpc	r21, r19
 d88:	44 f4       	brge	.+16     	; 0xd9a <fputc+0x38>
 d8a:	a0 81       	ld	r26, Z
 d8c:	b1 81       	ldd	r27, Z+1	; 0x01
 d8e:	9d 01       	movw	r18, r26
 d90:	2f 5f       	subi	r18, 0xFF	; 255
 d92:	3f 4f       	sbci	r19, 0xFF	; 255
 d94:	31 83       	std	Z+1, r19	; 0x01
 d96:	20 83       	st	Z, r18
 d98:	8c 93       	st	X, r24
 d9a:	26 81       	ldd	r18, Z+6	; 0x06
 d9c:	37 81       	ldd	r19, Z+7	; 0x07
 d9e:	2f 5f       	subi	r18, 0xFF	; 255
 da0:	3f 4f       	sbci	r19, 0xFF	; 255
 da2:	37 83       	std	Z+7, r19	; 0x07
 da4:	26 83       	std	Z+6, r18	; 0x06
 da6:	14 c0       	rjmp	.+40     	; 0xdd0 <fputc+0x6e>
 da8:	8b 01       	movw	r16, r22
 daa:	ec 01       	movw	r28, r24
 dac:	fb 01       	movw	r30, r22
 dae:	00 84       	ldd	r0, Z+8	; 0x08
 db0:	f1 85       	ldd	r31, Z+9	; 0x09
 db2:	e0 2d       	mov	r30, r0
 db4:	09 95       	icall
 db6:	89 2b       	or	r24, r25
 db8:	e1 f6       	brne	.-72     	; 0xd72 <fputc+0x10>
 dba:	d8 01       	movw	r26, r16
 dbc:	16 96       	adiw	r26, 0x06	; 6
 dbe:	8d 91       	ld	r24, X+
 dc0:	9c 91       	ld	r25, X
 dc2:	17 97       	sbiw	r26, 0x07	; 7
 dc4:	01 96       	adiw	r24, 0x01	; 1
 dc6:	17 96       	adiw	r26, 0x07	; 7
 dc8:	9c 93       	st	X, r25
 dca:	8e 93       	st	-X, r24
 dcc:	16 97       	sbiw	r26, 0x06	; 6
 dce:	ce 01       	movw	r24, r28
 dd0:	df 91       	pop	r29
 dd2:	cf 91       	pop	r28
 dd4:	1f 91       	pop	r17
 dd6:	0f 91       	pop	r16
 dd8:	08 95       	ret

00000dda <__ultoa_invert>:
 dda:	fa 01       	movw	r30, r20
 ddc:	aa 27       	eor	r26, r26
 dde:	28 30       	cpi	r18, 0x08	; 8
 de0:	51 f1       	breq	.+84     	; 0xe36 <__ultoa_invert+0x5c>
 de2:	20 31       	cpi	r18, 0x10	; 16
 de4:	81 f1       	breq	.+96     	; 0xe46 <__ultoa_invert+0x6c>
 de6:	e8 94       	clt
 de8:	6f 93       	push	r22
 dea:	6e 7f       	andi	r22, 0xFE	; 254
 dec:	6e 5f       	subi	r22, 0xFE	; 254
 dee:	7f 4f       	sbci	r23, 0xFF	; 255
 df0:	8f 4f       	sbci	r24, 0xFF	; 255
 df2:	9f 4f       	sbci	r25, 0xFF	; 255
 df4:	af 4f       	sbci	r26, 0xFF	; 255
 df6:	b1 e0       	ldi	r27, 0x01	; 1
 df8:	3e d0       	rcall	.+124    	; 0xe76 <__ultoa_invert+0x9c>
 dfa:	b4 e0       	ldi	r27, 0x04	; 4
 dfc:	3c d0       	rcall	.+120    	; 0xe76 <__ultoa_invert+0x9c>
 dfe:	67 0f       	add	r22, r23
 e00:	78 1f       	adc	r23, r24
 e02:	89 1f       	adc	r24, r25
 e04:	9a 1f       	adc	r25, r26
 e06:	a1 1d       	adc	r26, r1
 e08:	68 0f       	add	r22, r24
 e0a:	79 1f       	adc	r23, r25
 e0c:	8a 1f       	adc	r24, r26
 e0e:	91 1d       	adc	r25, r1
 e10:	a1 1d       	adc	r26, r1
 e12:	6a 0f       	add	r22, r26
 e14:	71 1d       	adc	r23, r1
 e16:	81 1d       	adc	r24, r1
 e18:	91 1d       	adc	r25, r1
 e1a:	a1 1d       	adc	r26, r1
 e1c:	20 d0       	rcall	.+64     	; 0xe5e <__ultoa_invert+0x84>
 e1e:	09 f4       	brne	.+2      	; 0xe22 <__ultoa_invert+0x48>
 e20:	68 94       	set
 e22:	3f 91       	pop	r19
 e24:	2a e0       	ldi	r18, 0x0A	; 10
 e26:	26 9f       	mul	r18, r22
 e28:	11 24       	eor	r1, r1
 e2a:	30 19       	sub	r19, r0
 e2c:	30 5d       	subi	r19, 0xD0	; 208
 e2e:	31 93       	st	Z+, r19
 e30:	de f6       	brtc	.-74     	; 0xde8 <__ultoa_invert+0xe>
 e32:	cf 01       	movw	r24, r30
 e34:	08 95       	ret
 e36:	46 2f       	mov	r20, r22
 e38:	47 70       	andi	r20, 0x07	; 7
 e3a:	40 5d       	subi	r20, 0xD0	; 208
 e3c:	41 93       	st	Z+, r20
 e3e:	b3 e0       	ldi	r27, 0x03	; 3
 e40:	0f d0       	rcall	.+30     	; 0xe60 <__ultoa_invert+0x86>
 e42:	c9 f7       	brne	.-14     	; 0xe36 <__ultoa_invert+0x5c>
 e44:	f6 cf       	rjmp	.-20     	; 0xe32 <__ultoa_invert+0x58>
 e46:	46 2f       	mov	r20, r22
 e48:	4f 70       	andi	r20, 0x0F	; 15
 e4a:	40 5d       	subi	r20, 0xD0	; 208
 e4c:	4a 33       	cpi	r20, 0x3A	; 58
 e4e:	18 f0       	brcs	.+6      	; 0xe56 <__ultoa_invert+0x7c>
 e50:	49 5d       	subi	r20, 0xD9	; 217
 e52:	31 fd       	sbrc	r19, 1
 e54:	40 52       	subi	r20, 0x20	; 32
 e56:	41 93       	st	Z+, r20
 e58:	02 d0       	rcall	.+4      	; 0xe5e <__ultoa_invert+0x84>
 e5a:	a9 f7       	brne	.-22     	; 0xe46 <__ultoa_invert+0x6c>
 e5c:	ea cf       	rjmp	.-44     	; 0xe32 <__ultoa_invert+0x58>
 e5e:	b4 e0       	ldi	r27, 0x04	; 4
 e60:	a6 95       	lsr	r26
 e62:	97 95       	ror	r25
 e64:	87 95       	ror	r24
 e66:	77 95       	ror	r23
 e68:	67 95       	ror	r22
 e6a:	ba 95       	dec	r27
 e6c:	c9 f7       	brne	.-14     	; 0xe60 <__ultoa_invert+0x86>
 e6e:	00 97       	sbiw	r24, 0x00	; 0
 e70:	61 05       	cpc	r22, r1
 e72:	71 05       	cpc	r23, r1
 e74:	08 95       	ret
 e76:	9b 01       	movw	r18, r22
 e78:	ac 01       	movw	r20, r24
 e7a:	0a 2e       	mov	r0, r26
 e7c:	06 94       	lsr	r0
 e7e:	57 95       	ror	r21
 e80:	47 95       	ror	r20
 e82:	37 95       	ror	r19
 e84:	27 95       	ror	r18
 e86:	ba 95       	dec	r27
 e88:	c9 f7       	brne	.-14     	; 0xe7c <__ultoa_invert+0xa2>
 e8a:	62 0f       	add	r22, r18
 e8c:	73 1f       	adc	r23, r19
 e8e:	84 1f       	adc	r24, r20
 e90:	95 1f       	adc	r25, r21
 e92:	a0 1d       	adc	r26, r0
 e94:	08 95       	ret

00000e96 <__prologue_saves__>:
 e96:	2f 92       	push	r2
 e98:	3f 92       	push	r3
 e9a:	4f 92       	push	r4
 e9c:	5f 92       	push	r5
 e9e:	6f 92       	push	r6
 ea0:	7f 92       	push	r7
 ea2:	8f 92       	push	r8
 ea4:	9f 92       	push	r9
 ea6:	af 92       	push	r10
 ea8:	bf 92       	push	r11
 eaa:	cf 92       	push	r12
 eac:	df 92       	push	r13
 eae:	ef 92       	push	r14
 eb0:	ff 92       	push	r15
 eb2:	0f 93       	push	r16
 eb4:	1f 93       	push	r17
 eb6:	cf 93       	push	r28
 eb8:	df 93       	push	r29
 eba:	cd b7       	in	r28, 0x3d	; 61
 ebc:	de b7       	in	r29, 0x3e	; 62
 ebe:	ca 1b       	sub	r28, r26
 ec0:	db 0b       	sbc	r29, r27
 ec2:	0f b6       	in	r0, 0x3f	; 63
 ec4:	f8 94       	cli
 ec6:	de bf       	out	0x3e, r29	; 62
 ec8:	0f be       	out	0x3f, r0	; 63
 eca:	cd bf       	out	0x3d, r28	; 61
 ecc:	09 94       	ijmp

00000ece <__epilogue_restores__>:
 ece:	2a 88       	ldd	r2, Y+18	; 0x12
 ed0:	39 88       	ldd	r3, Y+17	; 0x11
 ed2:	48 88       	ldd	r4, Y+16	; 0x10
 ed4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ed6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ed8:	7d 84       	ldd	r7, Y+13	; 0x0d
 eda:	8c 84       	ldd	r8, Y+12	; 0x0c
 edc:	9b 84       	ldd	r9, Y+11	; 0x0b
 ede:	aa 84       	ldd	r10, Y+10	; 0x0a
 ee0:	b9 84       	ldd	r11, Y+9	; 0x09
 ee2:	c8 84       	ldd	r12, Y+8	; 0x08
 ee4:	df 80       	ldd	r13, Y+7	; 0x07
 ee6:	ee 80       	ldd	r14, Y+6	; 0x06
 ee8:	fd 80       	ldd	r15, Y+5	; 0x05
 eea:	0c 81       	ldd	r16, Y+4	; 0x04
 eec:	1b 81       	ldd	r17, Y+3	; 0x03
 eee:	aa 81       	ldd	r26, Y+2	; 0x02
 ef0:	b9 81       	ldd	r27, Y+1	; 0x01
 ef2:	ce 0f       	add	r28, r30
 ef4:	d1 1d       	adc	r29, r1
 ef6:	0f b6       	in	r0, 0x3f	; 63
 ef8:	f8 94       	cli
 efa:	de bf       	out	0x3e, r29	; 62
 efc:	0f be       	out	0x3f, r0	; 63
 efe:	cd bf       	out	0x3d, r28	; 61
 f00:	ed 01       	movw	r28, r26
 f02:	08 95       	ret

00000f04 <_exit>:
 f04:	f8 94       	cli

00000f06 <__stop_program>:
 f06:	ff cf       	rjmp	.-2      	; 0xf06 <__stop_program>
